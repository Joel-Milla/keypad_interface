
012keypad_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001388  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001518  08001518  00002518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001550  08001550  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001550  08001550  00002550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001558  08001558  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001558  08001558  00002558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800155c  0800155c  0000255c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001560  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ab9  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003b4  00000000  00000000  00003b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00003ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d3  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cbe  00000000  00000000  000040fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015cf  00000000  00000000  00006db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000098b2  00000000  00000000  00008388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011c3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b80  00000000  00000000  00011c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000bc  00000000  00000000  00012800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001500 	.word	0x08001500

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001500 	.word	0x08001500

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
 * The pins that are going to be used as output are PD0-PD3 for the row ports (R1-R4). The pins are free to use
 * The pins that are going to be used as input are PD8-PD11 for the column ports (C1-C4). The pins are free to use
*/

int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
	// 1. Initialize required variables to handle memory-mapped registers with appropriate register addresses
	uint32_t volatile *const pAHB1ClockEnableRegister = (uint32_t *) 0x40023830; // Memory address of RCC to enable the clock
 8000276:	4b29      	ldr	r3, [pc, #164]	@ (800031c <main+0xac>)
 8000278:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const pGPIODPortModeRegister = (uint32_t *) 0x40020C00; // Memory address to change the port modes (input/output/etc) of the pins in GPIOD
 800027a:	4b29      	ldr	r3, [pc, #164]	@ (8000320 <main+0xb0>)
 800027c:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pGPIODPullRegister = (uint32_t *) 0x40020C0C; // Memory address to change to pull up/down registers on specific pins
 800027e:	4b29      	ldr	r3, [pc, #164]	@ (8000324 <main+0xb4>)
 8000280:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const pGPIODOutputDataRegister = (uint32_t *) 0x40020C14; // Memory address to change the output of pins
 8000282:	4b29      	ldr	r3, [pc, #164]	@ (8000328 <main+0xb8>)
 8000284:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const pGPIODInputDataRegister = (uint32_t *) 0x40020C10; // Memory address to read if there is any input in the pins
 8000286:	4b29      	ldr	r3, [pc, #164]	@ (800032c <main+0xbc>)
 8000288:	607b      	str	r3, [r7, #4]

	// 2. Initialize the clock register for the port that has the pins that will be used (GPIOD)
	*pAHB1ClockEnableRegister |= (1 << 3); // Set the third bit of GPIOD to on to enable clock
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f043 0208 	orr.w	r2, r3, #8
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	601a      	str	r2, [r3, #0]

	// 3. Initialization of variables and setup of environment for the MCU
	// a. Make all row IOs mode as output (PD0-PD3)
	*pGPIODPortModeRegister &= ~(0xFF); // clear the first 8 bits
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800029e:	693b      	ldr	r3, [r7, #16]
 80002a0:	601a      	str	r2, [r3, #0]
	*pGPIODPortModeRegister |= 0x55; // Set the first 8 bits to 01010101
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f043 0255 	orr.w	r2, r3, #85	@ 0x55
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	601a      	str	r2, [r3, #0]
	// b. Make all column IOs mode as input (PD8-PD11)
	*pGPIODPortModeRegister &= ~(0xFF << 16); // Clear the PD8-PD11 to set as input
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	601a      	str	r2, [r3, #0]
	// c. Activate internal pull-up resistors for columns IOs (PD8-PD11)
	*pGPIODPullRegister &= ~(0xFF << 16); // Clear all the 8 bits there
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	601a      	str	r2, [r3, #0]
	*pGPIODPullRegister |= (0x55 << 16); // Set PD8-PD11 as pull up
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f443 02aa 	orr.w	r2, r3, #5570560	@ 0x550000
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	601a      	str	r2, [r3, #0]

	// 4. Implement the key detect logic
	while (1) {
		// a. Set all row outputs as high
		*pGPIODOutputDataRegister = (uint16_t) 0x0F;
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	220f      	movs	r2, #15
 80002d6:	601a      	str	r2, [r3, #0]
//		if ( !(*pGPIODInputDataRegister & (1 << 11))) {
//			delay();
//			printf("D\n");
//		}

		for (uint8_t volatile pinIterator = 0; pinIterator < 4; pinIterator++) {
 80002d8:	2300      	movs	r3, #0
 80002da:	70fb      	strb	r3, [r7, #3]
 80002dc:	e018      	b.n	8000310 <main+0xa0>
			// b. Set Ri (i = pinIterator) as low
			*pGPIODOutputDataRegister &= ~(1 << pinIterator);
 80002de:	78fb      	ldrb	r3, [r7, #3]
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	461a      	mov	r2, r3
 80002e4:	2301      	movs	r3, #1
 80002e6:	4093      	lsls	r3, r2
 80002e8:	43da      	mvns	r2, r3
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	401a      	ands	r2, r3
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	601a      	str	r2, [r3, #0]
			// c. Check what column changed to zero (C1-C4) - To confirm if those are the pressed key
			findConnectionCx(pinIterator, pGPIODInputDataRegister);
 80002f4:	78fb      	ldrb	r3, [r7, #3]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	6879      	ldr	r1, [r7, #4]
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f82c 	bl	8000358 <findConnectionCx>
			// d. Reset the outputs so the printing is done correctly
			*pGPIODOutputDataRegister = (uint16_t) 0x0F;
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	220f      	movs	r2, #15
 8000304:	601a      	str	r2, [r3, #0]
		for (uint8_t volatile pinIterator = 0; pinIterator < 4; pinIterator++) {
 8000306:	78fb      	ldrb	r3, [r7, #3]
 8000308:	b2db      	uxtb	r3, r3
 800030a:	3301      	adds	r3, #1
 800030c:	b2db      	uxtb	r3, r3
 800030e:	70fb      	strb	r3, [r7, #3]
 8000310:	78fb      	ldrb	r3, [r7, #3]
 8000312:	b2db      	uxtb	r3, r3
 8000314:	2b03      	cmp	r3, #3
 8000316:	d9e2      	bls.n	80002de <main+0x6e>
		*pGPIODOutputDataRegister = (uint16_t) 0x0F;
 8000318:	e7db      	b.n	80002d2 <main+0x62>
 800031a:	bf00      	nop
 800031c:	40023830 	.word	0x40023830
 8000320:	40020c00 	.word	0x40020c00
 8000324:	40020c0c 	.word	0x40020c0c
 8000328:	40020c14 	.word	0x40020c14
 800032c:	40020c10 	.word	0x40020c10

08000330 <delay>:
	}
}

// Function that makes a delay when printing the values
void delay()
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
	// Make a delay using a for loop
	for(uint32_t volatile iterator; iterator < 300000; iterator++);
 8000336:	e002      	b.n	800033e <delay+0xe>
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3301      	adds	r3, #1
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a04      	ldr	r2, [pc, #16]	@ (8000354 <delay+0x24>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d9f8      	bls.n	8000338 <delay+0x8>
}
 8000346:	bf00      	nop
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	000493df 	.word	0x000493df

08000358 <findConnectionCx>:

// Finds which column is matched with the row called
void findConnectionCx(uint8_t row, uint32_t volatile *const pGPIODInputDataRegister)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	6039      	str	r1, [r7, #0]
 8000362:	71fb      	strb	r3, [r7, #7]
	// Check which column is on
	uint8_t C0IsOn = !( *pGPIODInputDataRegister & (1 << 8) );
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800036c:	2b00      	cmp	r3, #0
 800036e:	bf0c      	ite	eq
 8000370:	2301      	moveq	r3, #1
 8000372:	2300      	movne	r3, #0
 8000374:	b2db      	uxtb	r3, r3
 8000376:	73fb      	strb	r3, [r7, #15]
	uint8_t C1IsOn = !( *pGPIODInputDataRegister & (1 << 9) );
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000380:	2b00      	cmp	r3, #0
 8000382:	bf0c      	ite	eq
 8000384:	2301      	moveq	r3, #1
 8000386:	2300      	movne	r3, #0
 8000388:	b2db      	uxtb	r3, r3
 800038a:	73bb      	strb	r3, [r7, #14]
	uint8_t C2IsOn = !( *pGPIODInputDataRegister & (1 << 10) );
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000394:	2b00      	cmp	r3, #0
 8000396:	bf0c      	ite	eq
 8000398:	2301      	moveq	r3, #1
 800039a:	2300      	movne	r3, #0
 800039c:	b2db      	uxtb	r3, r3
 800039e:	737b      	strb	r3, [r7, #13]
	uint8_t C3IsOn = !( *pGPIODInputDataRegister & (1 << 11) );
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	bf0c      	ite	eq
 80003ac:	2301      	moveq	r3, #1
 80003ae:	2300      	movne	r3, #0
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	733b      	strb	r3, [r7, #12]

	uint8_t columnOn = C0IsOn ? 0 : C1IsOn ? 1 : C2IsOn ? 2 : C3IsOn ? 3 : 255; // Check which column is the one in the ground. 255 if there is no column on
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d110      	bne.n	80003dc <findConnectionCx+0x84>
 80003ba:	7bbb      	ldrb	r3, [r7, #14]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d10b      	bne.n	80003d8 <findConnectionCx+0x80>
 80003c0:	7b7b      	ldrb	r3, [r7, #13]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d106      	bne.n	80003d4 <findConnectionCx+0x7c>
 80003c6:	7b3b      	ldrb	r3, [r7, #12]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <findConnectionCx+0x78>
 80003cc:	2303      	movs	r3, #3
 80003ce:	e006      	b.n	80003de <findConnectionCx+0x86>
 80003d0:	23ff      	movs	r3, #255	@ 0xff
 80003d2:	e004      	b.n	80003de <findConnectionCx+0x86>
 80003d4:	2302      	movs	r3, #2
 80003d6:	e002      	b.n	80003de <findConnectionCx+0x86>
 80003d8:	2301      	movs	r3, #1
 80003da:	e000      	b.n	80003de <findConnectionCx+0x86>
 80003dc:	2300      	movs	r3, #0
 80003de:	72fb      	strb	r3, [r7, #11]
	if (columnOn != 255) {
 80003e0:	7afb      	ldrb	r3, [r7, #11]
 80003e2:	2bff      	cmp	r3, #255	@ 0xff
 80003e4:	d00c      	beq.n	8000400 <findConnectionCx+0xa8>
		delay(); // Apply delay before printing
 80003e6:	f7ff ffa3 	bl	8000330 <delay>
		// Print only when a column is on
		printf("%c\n", getCharacter(row, columnOn));
 80003ea:	7afa      	ldrb	r2, [r7, #11]
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	4611      	mov	r1, r2
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f80b 	bl	800040c <getCharacter>
 80003f6:	4603      	mov	r3, r0
 80003f8:	4619      	mov	r1, r3
 80003fa:	4803      	ldr	r0, [pc, #12]	@ (8000408 <findConnectionCx+0xb0>)
 80003fc:	f000 fa18 	bl	8000830 <iprintf>
	}
}
 8000400:	bf00      	nop
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	08001518 	.word	0x08001518

0800040c <getCharacter>:

// Returns the character that matches the row and the column
uint8_t getCharacter(uint8_t row, uint8_t column)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	460a      	mov	r2, r1
 8000416:	71fb      	strb	r3, [r7, #7]
 8000418:	4613      	mov	r3, r2
 800041a:	71bb      	strb	r3, [r7, #6]
	switch(row) {
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	2b03      	cmp	r3, #3
 8000420:	d84e      	bhi.n	80004c0 <getCharacter+0xb4>
 8000422:	a201      	add	r2, pc, #4	@ (adr r2, 8000428 <getCharacter+0x1c>)
 8000424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000428:	08000439 	.word	0x08000439
 800042c:	0800045b 	.word	0x0800045b
 8000430:	0800047d 	.word	0x0800047d
 8000434:	0800049f 	.word	0x0800049f
	case 0:
		if (column == 0) {
 8000438:	79bb      	ldrb	r3, [r7, #6]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d101      	bne.n	8000442 <getCharacter+0x36>
			return '1';
 800043e:	2331      	movs	r3, #49	@ 0x31
 8000440:	e03f      	b.n	80004c2 <getCharacter+0xb6>
		} else if (column == 1) {
 8000442:	79bb      	ldrb	r3, [r7, #6]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d101      	bne.n	800044c <getCharacter+0x40>
			return '2';
 8000448:	2332      	movs	r3, #50	@ 0x32
 800044a:	e03a      	b.n	80004c2 <getCharacter+0xb6>
		} else if (column == 2) {
 800044c:	79bb      	ldrb	r3, [r7, #6]
 800044e:	2b02      	cmp	r3, #2
 8000450:	d101      	bne.n	8000456 <getCharacter+0x4a>
			return '3';
 8000452:	2333      	movs	r3, #51	@ 0x33
 8000454:	e035      	b.n	80004c2 <getCharacter+0xb6>
		} else {
			return 'A';
 8000456:	2341      	movs	r3, #65	@ 0x41
 8000458:	e033      	b.n	80004c2 <getCharacter+0xb6>
		}
	case 1:
		if (column == 0) {
 800045a:	79bb      	ldrb	r3, [r7, #6]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d101      	bne.n	8000464 <getCharacter+0x58>
			return '4';
 8000460:	2334      	movs	r3, #52	@ 0x34
 8000462:	e02e      	b.n	80004c2 <getCharacter+0xb6>
		} else if (column == 1) {
 8000464:	79bb      	ldrb	r3, [r7, #6]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d101      	bne.n	800046e <getCharacter+0x62>
			return '5';
 800046a:	2335      	movs	r3, #53	@ 0x35
 800046c:	e029      	b.n	80004c2 <getCharacter+0xb6>
		} else if (column == 2) {
 800046e:	79bb      	ldrb	r3, [r7, #6]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d101      	bne.n	8000478 <getCharacter+0x6c>
			return '6';
 8000474:	2336      	movs	r3, #54	@ 0x36
 8000476:	e024      	b.n	80004c2 <getCharacter+0xb6>
		} else {
			return 'B';
 8000478:	2342      	movs	r3, #66	@ 0x42
 800047a:	e022      	b.n	80004c2 <getCharacter+0xb6>
		}
	case 2:
		if (column == 0) {
 800047c:	79bb      	ldrb	r3, [r7, #6]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d101      	bne.n	8000486 <getCharacter+0x7a>
			return '7';
 8000482:	2337      	movs	r3, #55	@ 0x37
 8000484:	e01d      	b.n	80004c2 <getCharacter+0xb6>
		} else if (column == 1) {
 8000486:	79bb      	ldrb	r3, [r7, #6]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d101      	bne.n	8000490 <getCharacter+0x84>
			return '8';
 800048c:	2338      	movs	r3, #56	@ 0x38
 800048e:	e018      	b.n	80004c2 <getCharacter+0xb6>
		} else if (column == 2) {
 8000490:	79bb      	ldrb	r3, [r7, #6]
 8000492:	2b02      	cmp	r3, #2
 8000494:	d101      	bne.n	800049a <getCharacter+0x8e>
			return '9';
 8000496:	2339      	movs	r3, #57	@ 0x39
 8000498:	e013      	b.n	80004c2 <getCharacter+0xb6>
		} else {
			return 'C';
 800049a:	2343      	movs	r3, #67	@ 0x43
 800049c:	e011      	b.n	80004c2 <getCharacter+0xb6>
		}
	case 3:
		if (column == 0) {
 800049e:	79bb      	ldrb	r3, [r7, #6]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d101      	bne.n	80004a8 <getCharacter+0x9c>
			return '*';
 80004a4:	232a      	movs	r3, #42	@ 0x2a
 80004a6:	e00c      	b.n	80004c2 <getCharacter+0xb6>
		} else if (column == 1) {
 80004a8:	79bb      	ldrb	r3, [r7, #6]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d101      	bne.n	80004b2 <getCharacter+0xa6>
			return '0';
 80004ae:	2330      	movs	r3, #48	@ 0x30
 80004b0:	e007      	b.n	80004c2 <getCharacter+0xb6>
		} else if (column == 2) {
 80004b2:	79bb      	ldrb	r3, [r7, #6]
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	d101      	bne.n	80004bc <getCharacter+0xb0>
			return '#';
 80004b8:	2323      	movs	r3, #35	@ 0x23
 80004ba:	e002      	b.n	80004c2 <getCharacter+0xb6>
		} else {
			return 'D';
 80004bc:	2344      	movs	r3, #68	@ 0x44
 80004be:	e000      	b.n	80004c2 <getCharacter+0xb6>
		}
	default:
		return 255;
 80004c0:	23ff      	movs	r3, #255	@ 0xff
	}
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000510 <ITM_SendChar+0x44>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a0d      	ldr	r2, [pc, #52]	@ (8000510 <ITM_SendChar+0x44>)
 80004dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004e0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <ITM_SendChar+0x48>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000514 <ITM_SendChar+0x48>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004ee:	bf00      	nop
 80004f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0f8      	beq.n	80004f0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004fe:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	6013      	str	r3, [r2, #0]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	e000edfc 	.word	0xe000edfc
 8000514:	e0000e00 	.word	0xe0000e00

08000518 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	e00a      	b.n	8000540 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800052a:	f3af 8000 	nop.w
 800052e:	4601      	mov	r1, r0
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	60ba      	str	r2, [r7, #8]
 8000536:	b2ca      	uxtb	r2, r1
 8000538:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	3301      	adds	r3, #1
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	429a      	cmp	r2, r3
 8000546:	dbf0      	blt.n	800052a <_read+0x12>
  }

  return len;
 8000548:	687b      	ldr	r3, [r7, #4]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <_write>:
__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b086      	sub	sp, #24
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	60b9      	str	r1, [r7, #8]
 800055c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
 8000562:	e009      	b.n	8000578 <_write+0x26>
  {
    // __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	60ba      	str	r2, [r7, #8]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ffad 	bl	80004cc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	3301      	adds	r3, #1
 8000576:	617b      	str	r3, [r7, #20]
 8000578:	697a      	ldr	r2, [r7, #20]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	429a      	cmp	r2, r3
 800057e:	dbf1      	blt.n	8000564 <_write+0x12>
  }
  return len;
 8000580:	687b      	ldr	r3, [r7, #4]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3718      	adds	r7, #24
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <_close>:

int _close(int file)
{
 800058a:	b480      	push	{r7}
 800058c:	b083      	sub	sp, #12
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005b0:	605a      	str	r2, [r3, #4]
  return 0;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr

080005be <_isatty>:

int _isatty(int file)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005c6:	2301      	movs	r3, #1
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr

080005d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b085      	sub	sp, #20
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	60f8      	str	r0, [r7, #12]
 80005da:	60b9      	str	r1, [r7, #8]
 80005dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr
	...

080005ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f4:	4a14      	ldr	r2, [pc, #80]	@ (8000648 <_sbrk+0x5c>)
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <_sbrk+0x60>)
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000600:	4b13      	ldr	r3, [pc, #76]	@ (8000650 <_sbrk+0x64>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d102      	bne.n	800060e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000608:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <_sbrk+0x64>)
 800060a:	4a12      	ldr	r2, [pc, #72]	@ (8000654 <_sbrk+0x68>)
 800060c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800060e:	4b10      	ldr	r3, [pc, #64]	@ (8000650 <_sbrk+0x64>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	429a      	cmp	r2, r3
 800061a:	d207      	bcs.n	800062c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800061c:	f000 f9ac 	bl	8000978 <__errno>
 8000620:	4603      	mov	r3, r0
 8000622:	220c      	movs	r2, #12
 8000624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	e009      	b.n	8000640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800062c:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <_sbrk+0x64>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000632:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <_sbrk+0x64>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	4a05      	ldr	r2, [pc, #20]	@ (8000650 <_sbrk+0x64>)
 800063c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800063e:	68fb      	ldr	r3, [r7, #12]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20020000 	.word	0x20020000
 800064c:	00000400 	.word	0x00000400
 8000650:	20000078 	.word	0x20000078
 8000654:	200001c8 	.word	0x200001c8

08000658 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000658:	480d      	ldr	r0, [pc, #52]	@ (8000690 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800065c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000660:	480c      	ldr	r0, [pc, #48]	@ (8000694 <LoopForever+0x6>)
  ldr r1, =_edata
 8000662:	490d      	ldr	r1, [pc, #52]	@ (8000698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000664:	4a0d      	ldr	r2, [pc, #52]	@ (800069c <LoopForever+0xe>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000668:	e002      	b.n	8000670 <LoopCopyDataInit>

0800066a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800066c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066e:	3304      	adds	r3, #4

08000670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000674:	d3f9      	bcc.n	800066a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000676:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000678:	4c0a      	ldr	r4, [pc, #40]	@ (80006a4 <LoopForever+0x16>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800067c:	e001      	b.n	8000682 <LoopFillZerobss>

0800067e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000680:	3204      	adds	r2, #4

08000682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000684:	d3fb      	bcc.n	800067e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000686:	f000 f97d 	bl	8000984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068a:	f7ff fdf1 	bl	8000270 <main>

0800068e <LoopForever>:

LoopForever:
  b LoopForever
 800068e:	e7fe      	b.n	800068e <LoopForever>
  ldr   r0, =_estack
 8000690:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800069c:	08001560 	.word	0x08001560
  ldr r2, =_sbss
 80006a0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006a4:	200001c8 	.word	0x200001c8

080006a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC_IRQHandler>
	...

080006ac <std>:
 80006ac:	2300      	movs	r3, #0
 80006ae:	b510      	push	{r4, lr}
 80006b0:	4604      	mov	r4, r0
 80006b2:	e9c0 3300 	strd	r3, r3, [r0]
 80006b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006ba:	6083      	str	r3, [r0, #8]
 80006bc:	8181      	strh	r1, [r0, #12]
 80006be:	6643      	str	r3, [r0, #100]	@ 0x64
 80006c0:	81c2      	strh	r2, [r0, #14]
 80006c2:	6183      	str	r3, [r0, #24]
 80006c4:	4619      	mov	r1, r3
 80006c6:	2208      	movs	r2, #8
 80006c8:	305c      	adds	r0, #92	@ 0x5c
 80006ca:	f000 f906 	bl	80008da <memset>
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <std+0x58>)
 80006d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <std+0x5c>)
 80006d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006d6:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <std+0x60>)
 80006d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <std+0x64>)
 80006dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80006de:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <std+0x68>)
 80006e0:	6224      	str	r4, [r4, #32]
 80006e2:	429c      	cmp	r4, r3
 80006e4:	d006      	beq.n	80006f4 <std+0x48>
 80006e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006ea:	4294      	cmp	r4, r2
 80006ec:	d002      	beq.n	80006f4 <std+0x48>
 80006ee:	33d0      	adds	r3, #208	@ 0xd0
 80006f0:	429c      	cmp	r4, r3
 80006f2:	d105      	bne.n	8000700 <std+0x54>
 80006f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006fc:	f000 b966 	b.w	80009cc <__retarget_lock_init_recursive>
 8000700:	bd10      	pop	{r4, pc}
 8000702:	bf00      	nop
 8000704:	08000855 	.word	0x08000855
 8000708:	08000877 	.word	0x08000877
 800070c:	080008af 	.word	0x080008af
 8000710:	080008d3 	.word	0x080008d3
 8000714:	2000007c 	.word	0x2000007c

08000718 <stdio_exit_handler>:
 8000718:	4a02      	ldr	r2, [pc, #8]	@ (8000724 <stdio_exit_handler+0xc>)
 800071a:	4903      	ldr	r1, [pc, #12]	@ (8000728 <stdio_exit_handler+0x10>)
 800071c:	4803      	ldr	r0, [pc, #12]	@ (800072c <stdio_exit_handler+0x14>)
 800071e:	f000 b869 	b.w	80007f4 <_fwalk_sglue>
 8000722:	bf00      	nop
 8000724:	20000000 	.word	0x20000000
 8000728:	08001261 	.word	0x08001261
 800072c:	20000010 	.word	0x20000010

08000730 <cleanup_stdio>:
 8000730:	6841      	ldr	r1, [r0, #4]
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <cleanup_stdio+0x34>)
 8000734:	4299      	cmp	r1, r3
 8000736:	b510      	push	{r4, lr}
 8000738:	4604      	mov	r4, r0
 800073a:	d001      	beq.n	8000740 <cleanup_stdio+0x10>
 800073c:	f000 fd90 	bl	8001260 <_fflush_r>
 8000740:	68a1      	ldr	r1, [r4, #8]
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <cleanup_stdio+0x38>)
 8000744:	4299      	cmp	r1, r3
 8000746:	d002      	beq.n	800074e <cleanup_stdio+0x1e>
 8000748:	4620      	mov	r0, r4
 800074a:	f000 fd89 	bl	8001260 <_fflush_r>
 800074e:	68e1      	ldr	r1, [r4, #12]
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <cleanup_stdio+0x3c>)
 8000752:	4299      	cmp	r1, r3
 8000754:	d004      	beq.n	8000760 <cleanup_stdio+0x30>
 8000756:	4620      	mov	r0, r4
 8000758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800075c:	f000 bd80 	b.w	8001260 <_fflush_r>
 8000760:	bd10      	pop	{r4, pc}
 8000762:	bf00      	nop
 8000764:	2000007c 	.word	0x2000007c
 8000768:	200000e4 	.word	0x200000e4
 800076c:	2000014c 	.word	0x2000014c

08000770 <global_stdio_init.part.0>:
 8000770:	b510      	push	{r4, lr}
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <global_stdio_init.part.0+0x30>)
 8000774:	4c0b      	ldr	r4, [pc, #44]	@ (80007a4 <global_stdio_init.part.0+0x34>)
 8000776:	4a0c      	ldr	r2, [pc, #48]	@ (80007a8 <global_stdio_init.part.0+0x38>)
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	4620      	mov	r0, r4
 800077c:	2200      	movs	r2, #0
 800077e:	2104      	movs	r1, #4
 8000780:	f7ff ff94 	bl	80006ac <std>
 8000784:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000788:	2201      	movs	r2, #1
 800078a:	2109      	movs	r1, #9
 800078c:	f7ff ff8e 	bl	80006ac <std>
 8000790:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000794:	2202      	movs	r2, #2
 8000796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800079a:	2112      	movs	r1, #18
 800079c:	f7ff bf86 	b.w	80006ac <std>
 80007a0:	200001b4 	.word	0x200001b4
 80007a4:	2000007c 	.word	0x2000007c
 80007a8:	08000719 	.word	0x08000719

080007ac <__sfp_lock_acquire>:
 80007ac:	4801      	ldr	r0, [pc, #4]	@ (80007b4 <__sfp_lock_acquire+0x8>)
 80007ae:	f000 b90e 	b.w	80009ce <__retarget_lock_acquire_recursive>
 80007b2:	bf00      	nop
 80007b4:	200001bd 	.word	0x200001bd

080007b8 <__sfp_lock_release>:
 80007b8:	4801      	ldr	r0, [pc, #4]	@ (80007c0 <__sfp_lock_release+0x8>)
 80007ba:	f000 b909 	b.w	80009d0 <__retarget_lock_release_recursive>
 80007be:	bf00      	nop
 80007c0:	200001bd 	.word	0x200001bd

080007c4 <__sinit>:
 80007c4:	b510      	push	{r4, lr}
 80007c6:	4604      	mov	r4, r0
 80007c8:	f7ff fff0 	bl	80007ac <__sfp_lock_acquire>
 80007cc:	6a23      	ldr	r3, [r4, #32]
 80007ce:	b11b      	cbz	r3, 80007d8 <__sinit+0x14>
 80007d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d4:	f7ff bff0 	b.w	80007b8 <__sfp_lock_release>
 80007d8:	4b04      	ldr	r3, [pc, #16]	@ (80007ec <__sinit+0x28>)
 80007da:	6223      	str	r3, [r4, #32]
 80007dc:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <__sinit+0x2c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1f5      	bne.n	80007d0 <__sinit+0xc>
 80007e4:	f7ff ffc4 	bl	8000770 <global_stdio_init.part.0>
 80007e8:	e7f2      	b.n	80007d0 <__sinit+0xc>
 80007ea:	bf00      	nop
 80007ec:	08000731 	.word	0x08000731
 80007f0:	200001b4 	.word	0x200001b4

080007f4 <_fwalk_sglue>:
 80007f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007f8:	4607      	mov	r7, r0
 80007fa:	4688      	mov	r8, r1
 80007fc:	4614      	mov	r4, r2
 80007fe:	2600      	movs	r6, #0
 8000800:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000804:	f1b9 0901 	subs.w	r9, r9, #1
 8000808:	d505      	bpl.n	8000816 <_fwalk_sglue+0x22>
 800080a:	6824      	ldr	r4, [r4, #0]
 800080c:	2c00      	cmp	r4, #0
 800080e:	d1f7      	bne.n	8000800 <_fwalk_sglue+0xc>
 8000810:	4630      	mov	r0, r6
 8000812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000816:	89ab      	ldrh	r3, [r5, #12]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d907      	bls.n	800082c <_fwalk_sglue+0x38>
 800081c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000820:	3301      	adds	r3, #1
 8000822:	d003      	beq.n	800082c <_fwalk_sglue+0x38>
 8000824:	4629      	mov	r1, r5
 8000826:	4638      	mov	r0, r7
 8000828:	47c0      	blx	r8
 800082a:	4306      	orrs	r6, r0
 800082c:	3568      	adds	r5, #104	@ 0x68
 800082e:	e7e9      	b.n	8000804 <_fwalk_sglue+0x10>

08000830 <iprintf>:
 8000830:	b40f      	push	{r0, r1, r2, r3}
 8000832:	b507      	push	{r0, r1, r2, lr}
 8000834:	4906      	ldr	r1, [pc, #24]	@ (8000850 <iprintf+0x20>)
 8000836:	ab04      	add	r3, sp, #16
 8000838:	6808      	ldr	r0, [r1, #0]
 800083a:	f853 2b04 	ldr.w	r2, [r3], #4
 800083e:	6881      	ldr	r1, [r0, #8]
 8000840:	9301      	str	r3, [sp, #4]
 8000842:	f000 f9e7 	bl	8000c14 <_vfiprintf_r>
 8000846:	b003      	add	sp, #12
 8000848:	f85d eb04 	ldr.w	lr, [sp], #4
 800084c:	b004      	add	sp, #16
 800084e:	4770      	bx	lr
 8000850:	2000000c 	.word	0x2000000c

08000854 <__sread>:
 8000854:	b510      	push	{r4, lr}
 8000856:	460c      	mov	r4, r1
 8000858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800085c:	f000 f868 	bl	8000930 <_read_r>
 8000860:	2800      	cmp	r0, #0
 8000862:	bfab      	itete	ge
 8000864:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000866:	89a3      	ldrhlt	r3, [r4, #12]
 8000868:	181b      	addge	r3, r3, r0
 800086a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800086e:	bfac      	ite	ge
 8000870:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000872:	81a3      	strhlt	r3, [r4, #12]
 8000874:	bd10      	pop	{r4, pc}

08000876 <__swrite>:
 8000876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800087a:	461f      	mov	r7, r3
 800087c:	898b      	ldrh	r3, [r1, #12]
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	4605      	mov	r5, r0
 8000882:	460c      	mov	r4, r1
 8000884:	4616      	mov	r6, r2
 8000886:	d505      	bpl.n	8000894 <__swrite+0x1e>
 8000888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800088c:	2302      	movs	r3, #2
 800088e:	2200      	movs	r2, #0
 8000890:	f000 f83c 	bl	800090c <_lseek_r>
 8000894:	89a3      	ldrh	r3, [r4, #12]
 8000896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800089a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800089e:	81a3      	strh	r3, [r4, #12]
 80008a0:	4632      	mov	r2, r6
 80008a2:	463b      	mov	r3, r7
 80008a4:	4628      	mov	r0, r5
 80008a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008aa:	f000 b853 	b.w	8000954 <_write_r>

080008ae <__sseek>:
 80008ae:	b510      	push	{r4, lr}
 80008b0:	460c      	mov	r4, r1
 80008b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008b6:	f000 f829 	bl	800090c <_lseek_r>
 80008ba:	1c43      	adds	r3, r0, #1
 80008bc:	89a3      	ldrh	r3, [r4, #12]
 80008be:	bf15      	itete	ne
 80008c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008ca:	81a3      	strheq	r3, [r4, #12]
 80008cc:	bf18      	it	ne
 80008ce:	81a3      	strhne	r3, [r4, #12]
 80008d0:	bd10      	pop	{r4, pc}

080008d2 <__sclose>:
 80008d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008d6:	f000 b809 	b.w	80008ec <_close_r>

080008da <memset>:
 80008da:	4402      	add	r2, r0
 80008dc:	4603      	mov	r3, r0
 80008de:	4293      	cmp	r3, r2
 80008e0:	d100      	bne.n	80008e4 <memset+0xa>
 80008e2:	4770      	bx	lr
 80008e4:	f803 1b01 	strb.w	r1, [r3], #1
 80008e8:	e7f9      	b.n	80008de <memset+0x4>
	...

080008ec <_close_r>:
 80008ec:	b538      	push	{r3, r4, r5, lr}
 80008ee:	4d06      	ldr	r5, [pc, #24]	@ (8000908 <_close_r+0x1c>)
 80008f0:	2300      	movs	r3, #0
 80008f2:	4604      	mov	r4, r0
 80008f4:	4608      	mov	r0, r1
 80008f6:	602b      	str	r3, [r5, #0]
 80008f8:	f7ff fe47 	bl	800058a <_close>
 80008fc:	1c43      	adds	r3, r0, #1
 80008fe:	d102      	bne.n	8000906 <_close_r+0x1a>
 8000900:	682b      	ldr	r3, [r5, #0]
 8000902:	b103      	cbz	r3, 8000906 <_close_r+0x1a>
 8000904:	6023      	str	r3, [r4, #0]
 8000906:	bd38      	pop	{r3, r4, r5, pc}
 8000908:	200001b8 	.word	0x200001b8

0800090c <_lseek_r>:
 800090c:	b538      	push	{r3, r4, r5, lr}
 800090e:	4d07      	ldr	r5, [pc, #28]	@ (800092c <_lseek_r+0x20>)
 8000910:	4604      	mov	r4, r0
 8000912:	4608      	mov	r0, r1
 8000914:	4611      	mov	r1, r2
 8000916:	2200      	movs	r2, #0
 8000918:	602a      	str	r2, [r5, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	f7ff fe59 	bl	80005d2 <_lseek>
 8000920:	1c43      	adds	r3, r0, #1
 8000922:	d102      	bne.n	800092a <_lseek_r+0x1e>
 8000924:	682b      	ldr	r3, [r5, #0]
 8000926:	b103      	cbz	r3, 800092a <_lseek_r+0x1e>
 8000928:	6023      	str	r3, [r4, #0]
 800092a:	bd38      	pop	{r3, r4, r5, pc}
 800092c:	200001b8 	.word	0x200001b8

08000930 <_read_r>:
 8000930:	b538      	push	{r3, r4, r5, lr}
 8000932:	4d07      	ldr	r5, [pc, #28]	@ (8000950 <_read_r+0x20>)
 8000934:	4604      	mov	r4, r0
 8000936:	4608      	mov	r0, r1
 8000938:	4611      	mov	r1, r2
 800093a:	2200      	movs	r2, #0
 800093c:	602a      	str	r2, [r5, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	f7ff fdea 	bl	8000518 <_read>
 8000944:	1c43      	adds	r3, r0, #1
 8000946:	d102      	bne.n	800094e <_read_r+0x1e>
 8000948:	682b      	ldr	r3, [r5, #0]
 800094a:	b103      	cbz	r3, 800094e <_read_r+0x1e>
 800094c:	6023      	str	r3, [r4, #0]
 800094e:	bd38      	pop	{r3, r4, r5, pc}
 8000950:	200001b8 	.word	0x200001b8

08000954 <_write_r>:
 8000954:	b538      	push	{r3, r4, r5, lr}
 8000956:	4d07      	ldr	r5, [pc, #28]	@ (8000974 <_write_r+0x20>)
 8000958:	4604      	mov	r4, r0
 800095a:	4608      	mov	r0, r1
 800095c:	4611      	mov	r1, r2
 800095e:	2200      	movs	r2, #0
 8000960:	602a      	str	r2, [r5, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	f7ff fdf5 	bl	8000552 <_write>
 8000968:	1c43      	adds	r3, r0, #1
 800096a:	d102      	bne.n	8000972 <_write_r+0x1e>
 800096c:	682b      	ldr	r3, [r5, #0]
 800096e:	b103      	cbz	r3, 8000972 <_write_r+0x1e>
 8000970:	6023      	str	r3, [r4, #0]
 8000972:	bd38      	pop	{r3, r4, r5, pc}
 8000974:	200001b8 	.word	0x200001b8

08000978 <__errno>:
 8000978:	4b01      	ldr	r3, [pc, #4]	@ (8000980 <__errno+0x8>)
 800097a:	6818      	ldr	r0, [r3, #0]
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	2000000c 	.word	0x2000000c

08000984 <__libc_init_array>:
 8000984:	b570      	push	{r4, r5, r6, lr}
 8000986:	4d0d      	ldr	r5, [pc, #52]	@ (80009bc <__libc_init_array+0x38>)
 8000988:	4c0d      	ldr	r4, [pc, #52]	@ (80009c0 <__libc_init_array+0x3c>)
 800098a:	1b64      	subs	r4, r4, r5
 800098c:	10a4      	asrs	r4, r4, #2
 800098e:	2600      	movs	r6, #0
 8000990:	42a6      	cmp	r6, r4
 8000992:	d109      	bne.n	80009a8 <__libc_init_array+0x24>
 8000994:	4d0b      	ldr	r5, [pc, #44]	@ (80009c4 <__libc_init_array+0x40>)
 8000996:	4c0c      	ldr	r4, [pc, #48]	@ (80009c8 <__libc_init_array+0x44>)
 8000998:	f000 fdb2 	bl	8001500 <_init>
 800099c:	1b64      	subs	r4, r4, r5
 800099e:	10a4      	asrs	r4, r4, #2
 80009a0:	2600      	movs	r6, #0
 80009a2:	42a6      	cmp	r6, r4
 80009a4:	d105      	bne.n	80009b2 <__libc_init_array+0x2e>
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ac:	4798      	blx	r3
 80009ae:	3601      	adds	r6, #1
 80009b0:	e7ee      	b.n	8000990 <__libc_init_array+0xc>
 80009b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009b6:	4798      	blx	r3
 80009b8:	3601      	adds	r6, #1
 80009ba:	e7f2      	b.n	80009a2 <__libc_init_array+0x1e>
 80009bc:	08001558 	.word	0x08001558
 80009c0:	08001558 	.word	0x08001558
 80009c4:	08001558 	.word	0x08001558
 80009c8:	0800155c 	.word	0x0800155c

080009cc <__retarget_lock_init_recursive>:
 80009cc:	4770      	bx	lr

080009ce <__retarget_lock_acquire_recursive>:
 80009ce:	4770      	bx	lr

080009d0 <__retarget_lock_release_recursive>:
 80009d0:	4770      	bx	lr
	...

080009d4 <_free_r>:
 80009d4:	b538      	push	{r3, r4, r5, lr}
 80009d6:	4605      	mov	r5, r0
 80009d8:	2900      	cmp	r1, #0
 80009da:	d041      	beq.n	8000a60 <_free_r+0x8c>
 80009dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009e0:	1f0c      	subs	r4, r1, #4
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	bfb8      	it	lt
 80009e6:	18e4      	addlt	r4, r4, r3
 80009e8:	f000 f8e0 	bl	8000bac <__malloc_lock>
 80009ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000a64 <_free_r+0x90>)
 80009ee:	6813      	ldr	r3, [r2, #0]
 80009f0:	b933      	cbnz	r3, 8000a00 <_free_r+0x2c>
 80009f2:	6063      	str	r3, [r4, #4]
 80009f4:	6014      	str	r4, [r2, #0]
 80009f6:	4628      	mov	r0, r5
 80009f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009fc:	f000 b8dc 	b.w	8000bb8 <__malloc_unlock>
 8000a00:	42a3      	cmp	r3, r4
 8000a02:	d908      	bls.n	8000a16 <_free_r+0x42>
 8000a04:	6820      	ldr	r0, [r4, #0]
 8000a06:	1821      	adds	r1, r4, r0
 8000a08:	428b      	cmp	r3, r1
 8000a0a:	bf01      	itttt	eq
 8000a0c:	6819      	ldreq	r1, [r3, #0]
 8000a0e:	685b      	ldreq	r3, [r3, #4]
 8000a10:	1809      	addeq	r1, r1, r0
 8000a12:	6021      	streq	r1, [r4, #0]
 8000a14:	e7ed      	b.n	80009f2 <_free_r+0x1e>
 8000a16:	461a      	mov	r2, r3
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	b10b      	cbz	r3, 8000a20 <_free_r+0x4c>
 8000a1c:	42a3      	cmp	r3, r4
 8000a1e:	d9fa      	bls.n	8000a16 <_free_r+0x42>
 8000a20:	6811      	ldr	r1, [r2, #0]
 8000a22:	1850      	adds	r0, r2, r1
 8000a24:	42a0      	cmp	r0, r4
 8000a26:	d10b      	bne.n	8000a40 <_free_r+0x6c>
 8000a28:	6820      	ldr	r0, [r4, #0]
 8000a2a:	4401      	add	r1, r0
 8000a2c:	1850      	adds	r0, r2, r1
 8000a2e:	4283      	cmp	r3, r0
 8000a30:	6011      	str	r1, [r2, #0]
 8000a32:	d1e0      	bne.n	80009f6 <_free_r+0x22>
 8000a34:	6818      	ldr	r0, [r3, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	6053      	str	r3, [r2, #4]
 8000a3a:	4408      	add	r0, r1
 8000a3c:	6010      	str	r0, [r2, #0]
 8000a3e:	e7da      	b.n	80009f6 <_free_r+0x22>
 8000a40:	d902      	bls.n	8000a48 <_free_r+0x74>
 8000a42:	230c      	movs	r3, #12
 8000a44:	602b      	str	r3, [r5, #0]
 8000a46:	e7d6      	b.n	80009f6 <_free_r+0x22>
 8000a48:	6820      	ldr	r0, [r4, #0]
 8000a4a:	1821      	adds	r1, r4, r0
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	bf04      	itt	eq
 8000a50:	6819      	ldreq	r1, [r3, #0]
 8000a52:	685b      	ldreq	r3, [r3, #4]
 8000a54:	6063      	str	r3, [r4, #4]
 8000a56:	bf04      	itt	eq
 8000a58:	1809      	addeq	r1, r1, r0
 8000a5a:	6021      	streq	r1, [r4, #0]
 8000a5c:	6054      	str	r4, [r2, #4]
 8000a5e:	e7ca      	b.n	80009f6 <_free_r+0x22>
 8000a60:	bd38      	pop	{r3, r4, r5, pc}
 8000a62:	bf00      	nop
 8000a64:	200001c4 	.word	0x200001c4

08000a68 <sbrk_aligned>:
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	4e0f      	ldr	r6, [pc, #60]	@ (8000aa8 <sbrk_aligned+0x40>)
 8000a6c:	460c      	mov	r4, r1
 8000a6e:	6831      	ldr	r1, [r6, #0]
 8000a70:	4605      	mov	r5, r0
 8000a72:	b911      	cbnz	r1, 8000a7a <sbrk_aligned+0x12>
 8000a74:	f000 fcb0 	bl	80013d8 <_sbrk_r>
 8000a78:	6030      	str	r0, [r6, #0]
 8000a7a:	4621      	mov	r1, r4
 8000a7c:	4628      	mov	r0, r5
 8000a7e:	f000 fcab 	bl	80013d8 <_sbrk_r>
 8000a82:	1c43      	adds	r3, r0, #1
 8000a84:	d103      	bne.n	8000a8e <sbrk_aligned+0x26>
 8000a86:	f04f 34ff 	mov.w	r4, #4294967295
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
 8000a8e:	1cc4      	adds	r4, r0, #3
 8000a90:	f024 0403 	bic.w	r4, r4, #3
 8000a94:	42a0      	cmp	r0, r4
 8000a96:	d0f8      	beq.n	8000a8a <sbrk_aligned+0x22>
 8000a98:	1a21      	subs	r1, r4, r0
 8000a9a:	4628      	mov	r0, r5
 8000a9c:	f000 fc9c 	bl	80013d8 <_sbrk_r>
 8000aa0:	3001      	adds	r0, #1
 8000aa2:	d1f2      	bne.n	8000a8a <sbrk_aligned+0x22>
 8000aa4:	e7ef      	b.n	8000a86 <sbrk_aligned+0x1e>
 8000aa6:	bf00      	nop
 8000aa8:	200001c0 	.word	0x200001c0

08000aac <_malloc_r>:
 8000aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ab0:	1ccd      	adds	r5, r1, #3
 8000ab2:	f025 0503 	bic.w	r5, r5, #3
 8000ab6:	3508      	adds	r5, #8
 8000ab8:	2d0c      	cmp	r5, #12
 8000aba:	bf38      	it	cc
 8000abc:	250c      	movcc	r5, #12
 8000abe:	2d00      	cmp	r5, #0
 8000ac0:	4606      	mov	r6, r0
 8000ac2:	db01      	blt.n	8000ac8 <_malloc_r+0x1c>
 8000ac4:	42a9      	cmp	r1, r5
 8000ac6:	d904      	bls.n	8000ad2 <_malloc_r+0x26>
 8000ac8:	230c      	movs	r3, #12
 8000aca:	6033      	str	r3, [r6, #0]
 8000acc:	2000      	movs	r0, #0
 8000ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ad2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ba8 <_malloc_r+0xfc>
 8000ad6:	f000 f869 	bl	8000bac <__malloc_lock>
 8000ada:	f8d8 3000 	ldr.w	r3, [r8]
 8000ade:	461c      	mov	r4, r3
 8000ae0:	bb44      	cbnz	r4, 8000b34 <_malloc_r+0x88>
 8000ae2:	4629      	mov	r1, r5
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	f7ff ffbf 	bl	8000a68 <sbrk_aligned>
 8000aea:	1c43      	adds	r3, r0, #1
 8000aec:	4604      	mov	r4, r0
 8000aee:	d158      	bne.n	8000ba2 <_malloc_r+0xf6>
 8000af0:	f8d8 4000 	ldr.w	r4, [r8]
 8000af4:	4627      	mov	r7, r4
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d143      	bne.n	8000b82 <_malloc_r+0xd6>
 8000afa:	2c00      	cmp	r4, #0
 8000afc:	d04b      	beq.n	8000b96 <_malloc_r+0xea>
 8000afe:	6823      	ldr	r3, [r4, #0]
 8000b00:	4639      	mov	r1, r7
 8000b02:	4630      	mov	r0, r6
 8000b04:	eb04 0903 	add.w	r9, r4, r3
 8000b08:	f000 fc66 	bl	80013d8 <_sbrk_r>
 8000b0c:	4581      	cmp	r9, r0
 8000b0e:	d142      	bne.n	8000b96 <_malloc_r+0xea>
 8000b10:	6821      	ldr	r1, [r4, #0]
 8000b12:	1a6d      	subs	r5, r5, r1
 8000b14:	4629      	mov	r1, r5
 8000b16:	4630      	mov	r0, r6
 8000b18:	f7ff ffa6 	bl	8000a68 <sbrk_aligned>
 8000b1c:	3001      	adds	r0, #1
 8000b1e:	d03a      	beq.n	8000b96 <_malloc_r+0xea>
 8000b20:	6823      	ldr	r3, [r4, #0]
 8000b22:	442b      	add	r3, r5
 8000b24:	6023      	str	r3, [r4, #0]
 8000b26:	f8d8 3000 	ldr.w	r3, [r8]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	bb62      	cbnz	r2, 8000b88 <_malloc_r+0xdc>
 8000b2e:	f8c8 7000 	str.w	r7, [r8]
 8000b32:	e00f      	b.n	8000b54 <_malloc_r+0xa8>
 8000b34:	6822      	ldr	r2, [r4, #0]
 8000b36:	1b52      	subs	r2, r2, r5
 8000b38:	d420      	bmi.n	8000b7c <_malloc_r+0xd0>
 8000b3a:	2a0b      	cmp	r2, #11
 8000b3c:	d917      	bls.n	8000b6e <_malloc_r+0xc2>
 8000b3e:	1961      	adds	r1, r4, r5
 8000b40:	42a3      	cmp	r3, r4
 8000b42:	6025      	str	r5, [r4, #0]
 8000b44:	bf18      	it	ne
 8000b46:	6059      	strne	r1, [r3, #4]
 8000b48:	6863      	ldr	r3, [r4, #4]
 8000b4a:	bf08      	it	eq
 8000b4c:	f8c8 1000 	streq.w	r1, [r8]
 8000b50:	5162      	str	r2, [r4, r5]
 8000b52:	604b      	str	r3, [r1, #4]
 8000b54:	4630      	mov	r0, r6
 8000b56:	f000 f82f 	bl	8000bb8 <__malloc_unlock>
 8000b5a:	f104 000b 	add.w	r0, r4, #11
 8000b5e:	1d23      	adds	r3, r4, #4
 8000b60:	f020 0007 	bic.w	r0, r0, #7
 8000b64:	1ac2      	subs	r2, r0, r3
 8000b66:	bf1c      	itt	ne
 8000b68:	1a1b      	subne	r3, r3, r0
 8000b6a:	50a3      	strne	r3, [r4, r2]
 8000b6c:	e7af      	b.n	8000ace <_malloc_r+0x22>
 8000b6e:	6862      	ldr	r2, [r4, #4]
 8000b70:	42a3      	cmp	r3, r4
 8000b72:	bf0c      	ite	eq
 8000b74:	f8c8 2000 	streq.w	r2, [r8]
 8000b78:	605a      	strne	r2, [r3, #4]
 8000b7a:	e7eb      	b.n	8000b54 <_malloc_r+0xa8>
 8000b7c:	4623      	mov	r3, r4
 8000b7e:	6864      	ldr	r4, [r4, #4]
 8000b80:	e7ae      	b.n	8000ae0 <_malloc_r+0x34>
 8000b82:	463c      	mov	r4, r7
 8000b84:	687f      	ldr	r7, [r7, #4]
 8000b86:	e7b6      	b.n	8000af6 <_malloc_r+0x4a>
 8000b88:	461a      	mov	r2, r3
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	42a3      	cmp	r3, r4
 8000b8e:	d1fb      	bne.n	8000b88 <_malloc_r+0xdc>
 8000b90:	2300      	movs	r3, #0
 8000b92:	6053      	str	r3, [r2, #4]
 8000b94:	e7de      	b.n	8000b54 <_malloc_r+0xa8>
 8000b96:	230c      	movs	r3, #12
 8000b98:	6033      	str	r3, [r6, #0]
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	f000 f80c 	bl	8000bb8 <__malloc_unlock>
 8000ba0:	e794      	b.n	8000acc <_malloc_r+0x20>
 8000ba2:	6005      	str	r5, [r0, #0]
 8000ba4:	e7d6      	b.n	8000b54 <_malloc_r+0xa8>
 8000ba6:	bf00      	nop
 8000ba8:	200001c4 	.word	0x200001c4

08000bac <__malloc_lock>:
 8000bac:	4801      	ldr	r0, [pc, #4]	@ (8000bb4 <__malloc_lock+0x8>)
 8000bae:	f7ff bf0e 	b.w	80009ce <__retarget_lock_acquire_recursive>
 8000bb2:	bf00      	nop
 8000bb4:	200001bc 	.word	0x200001bc

08000bb8 <__malloc_unlock>:
 8000bb8:	4801      	ldr	r0, [pc, #4]	@ (8000bc0 <__malloc_unlock+0x8>)
 8000bba:	f7ff bf09 	b.w	80009d0 <__retarget_lock_release_recursive>
 8000bbe:	bf00      	nop
 8000bc0:	200001bc 	.word	0x200001bc

08000bc4 <__sfputc_r>:
 8000bc4:	6893      	ldr	r3, [r2, #8]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	b410      	push	{r4}
 8000bcc:	6093      	str	r3, [r2, #8]
 8000bce:	da07      	bge.n	8000be0 <__sfputc_r+0x1c>
 8000bd0:	6994      	ldr	r4, [r2, #24]
 8000bd2:	42a3      	cmp	r3, r4
 8000bd4:	db01      	blt.n	8000bda <__sfputc_r+0x16>
 8000bd6:	290a      	cmp	r1, #10
 8000bd8:	d102      	bne.n	8000be0 <__sfputc_r+0x1c>
 8000bda:	bc10      	pop	{r4}
 8000bdc:	f000 bb68 	b.w	80012b0 <__swbuf_r>
 8000be0:	6813      	ldr	r3, [r2, #0]
 8000be2:	1c58      	adds	r0, r3, #1
 8000be4:	6010      	str	r0, [r2, #0]
 8000be6:	7019      	strb	r1, [r3, #0]
 8000be8:	4608      	mov	r0, r1
 8000bea:	bc10      	pop	{r4}
 8000bec:	4770      	bx	lr

08000bee <__sfputs_r>:
 8000bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf0:	4606      	mov	r6, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	4614      	mov	r4, r2
 8000bf6:	18d5      	adds	r5, r2, r3
 8000bf8:	42ac      	cmp	r4, r5
 8000bfa:	d101      	bne.n	8000c00 <__sfputs_r+0x12>
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	e007      	b.n	8000c10 <__sfputs_r+0x22>
 8000c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c04:	463a      	mov	r2, r7
 8000c06:	4630      	mov	r0, r6
 8000c08:	f7ff ffdc 	bl	8000bc4 <__sfputc_r>
 8000c0c:	1c43      	adds	r3, r0, #1
 8000c0e:	d1f3      	bne.n	8000bf8 <__sfputs_r+0xa>
 8000c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c14 <_vfiprintf_r>:
 8000c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c18:	460d      	mov	r5, r1
 8000c1a:	b09d      	sub	sp, #116	@ 0x74
 8000c1c:	4614      	mov	r4, r2
 8000c1e:	4698      	mov	r8, r3
 8000c20:	4606      	mov	r6, r0
 8000c22:	b118      	cbz	r0, 8000c2c <_vfiprintf_r+0x18>
 8000c24:	6a03      	ldr	r3, [r0, #32]
 8000c26:	b90b      	cbnz	r3, 8000c2c <_vfiprintf_r+0x18>
 8000c28:	f7ff fdcc 	bl	80007c4 <__sinit>
 8000c2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c2e:	07d9      	lsls	r1, r3, #31
 8000c30:	d405      	bmi.n	8000c3e <_vfiprintf_r+0x2a>
 8000c32:	89ab      	ldrh	r3, [r5, #12]
 8000c34:	059a      	lsls	r2, r3, #22
 8000c36:	d402      	bmi.n	8000c3e <_vfiprintf_r+0x2a>
 8000c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c3a:	f7ff fec8 	bl	80009ce <__retarget_lock_acquire_recursive>
 8000c3e:	89ab      	ldrh	r3, [r5, #12]
 8000c40:	071b      	lsls	r3, r3, #28
 8000c42:	d501      	bpl.n	8000c48 <_vfiprintf_r+0x34>
 8000c44:	692b      	ldr	r3, [r5, #16]
 8000c46:	b99b      	cbnz	r3, 8000c70 <_vfiprintf_r+0x5c>
 8000c48:	4629      	mov	r1, r5
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	f000 fb6e 	bl	800132c <__swsetup_r>
 8000c50:	b170      	cbz	r0, 8000c70 <_vfiprintf_r+0x5c>
 8000c52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c54:	07dc      	lsls	r4, r3, #31
 8000c56:	d504      	bpl.n	8000c62 <_vfiprintf_r+0x4e>
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	b01d      	add	sp, #116	@ 0x74
 8000c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c62:	89ab      	ldrh	r3, [r5, #12]
 8000c64:	0598      	lsls	r0, r3, #22
 8000c66:	d4f7      	bmi.n	8000c58 <_vfiprintf_r+0x44>
 8000c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c6a:	f7ff feb1 	bl	80009d0 <__retarget_lock_release_recursive>
 8000c6e:	e7f3      	b.n	8000c58 <_vfiprintf_r+0x44>
 8000c70:	2300      	movs	r3, #0
 8000c72:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c74:	2320      	movs	r3, #32
 8000c76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000c7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c7e:	2330      	movs	r3, #48	@ 0x30
 8000c80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000e30 <_vfiprintf_r+0x21c>
 8000c84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000c88:	f04f 0901 	mov.w	r9, #1
 8000c8c:	4623      	mov	r3, r4
 8000c8e:	469a      	mov	sl, r3
 8000c90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c94:	b10a      	cbz	r2, 8000c9a <_vfiprintf_r+0x86>
 8000c96:	2a25      	cmp	r2, #37	@ 0x25
 8000c98:	d1f9      	bne.n	8000c8e <_vfiprintf_r+0x7a>
 8000c9a:	ebba 0b04 	subs.w	fp, sl, r4
 8000c9e:	d00b      	beq.n	8000cb8 <_vfiprintf_r+0xa4>
 8000ca0:	465b      	mov	r3, fp
 8000ca2:	4622      	mov	r2, r4
 8000ca4:	4629      	mov	r1, r5
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	f7ff ffa1 	bl	8000bee <__sfputs_r>
 8000cac:	3001      	adds	r0, #1
 8000cae:	f000 80a7 	beq.w	8000e00 <_vfiprintf_r+0x1ec>
 8000cb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000cb4:	445a      	add	r2, fp
 8000cb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8000cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f000 809f 	beq.w	8000e00 <_vfiprintf_r+0x1ec>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ccc:	f10a 0a01 	add.w	sl, sl, #1
 8000cd0:	9304      	str	r3, [sp, #16]
 8000cd2:	9307      	str	r3, [sp, #28]
 8000cd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000cd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8000cda:	4654      	mov	r4, sl
 8000cdc:	2205      	movs	r2, #5
 8000cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ce2:	4853      	ldr	r0, [pc, #332]	@ (8000e30 <_vfiprintf_r+0x21c>)
 8000ce4:	f7ff fa74 	bl	80001d0 <memchr>
 8000ce8:	9a04      	ldr	r2, [sp, #16]
 8000cea:	b9d8      	cbnz	r0, 8000d24 <_vfiprintf_r+0x110>
 8000cec:	06d1      	lsls	r1, r2, #27
 8000cee:	bf44      	itt	mi
 8000cf0:	2320      	movmi	r3, #32
 8000cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000cf6:	0713      	lsls	r3, r2, #28
 8000cf8:	bf44      	itt	mi
 8000cfa:	232b      	movmi	r3, #43	@ 0x2b
 8000cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d00:	f89a 3000 	ldrb.w	r3, [sl]
 8000d04:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d06:	d015      	beq.n	8000d34 <_vfiprintf_r+0x120>
 8000d08:	9a07      	ldr	r2, [sp, #28]
 8000d0a:	4654      	mov	r4, sl
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f04f 0c0a 	mov.w	ip, #10
 8000d12:	4621      	mov	r1, r4
 8000d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d18:	3b30      	subs	r3, #48	@ 0x30
 8000d1a:	2b09      	cmp	r3, #9
 8000d1c:	d94b      	bls.n	8000db6 <_vfiprintf_r+0x1a2>
 8000d1e:	b1b0      	cbz	r0, 8000d4e <_vfiprintf_r+0x13a>
 8000d20:	9207      	str	r2, [sp, #28]
 8000d22:	e014      	b.n	8000d4e <_vfiprintf_r+0x13a>
 8000d24:	eba0 0308 	sub.w	r3, r0, r8
 8000d28:	fa09 f303 	lsl.w	r3, r9, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	9304      	str	r3, [sp, #16]
 8000d30:	46a2      	mov	sl, r4
 8000d32:	e7d2      	b.n	8000cda <_vfiprintf_r+0xc6>
 8000d34:	9b03      	ldr	r3, [sp, #12]
 8000d36:	1d19      	adds	r1, r3, #4
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	9103      	str	r1, [sp, #12]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bfbb      	ittet	lt
 8000d40:	425b      	neglt	r3, r3
 8000d42:	f042 0202 	orrlt.w	r2, r2, #2
 8000d46:	9307      	strge	r3, [sp, #28]
 8000d48:	9307      	strlt	r3, [sp, #28]
 8000d4a:	bfb8      	it	lt
 8000d4c:	9204      	strlt	r2, [sp, #16]
 8000d4e:	7823      	ldrb	r3, [r4, #0]
 8000d50:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d52:	d10a      	bne.n	8000d6a <_vfiprintf_r+0x156>
 8000d54:	7863      	ldrb	r3, [r4, #1]
 8000d56:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d58:	d132      	bne.n	8000dc0 <_vfiprintf_r+0x1ac>
 8000d5a:	9b03      	ldr	r3, [sp, #12]
 8000d5c:	1d1a      	adds	r2, r3, #4
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	9203      	str	r2, [sp, #12]
 8000d62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d66:	3402      	adds	r4, #2
 8000d68:	9305      	str	r3, [sp, #20]
 8000d6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000e34 <_vfiprintf_r+0x220>
 8000d6e:	7821      	ldrb	r1, [r4, #0]
 8000d70:	2203      	movs	r2, #3
 8000d72:	4650      	mov	r0, sl
 8000d74:	f7ff fa2c 	bl	80001d0 <memchr>
 8000d78:	b138      	cbz	r0, 8000d8a <_vfiprintf_r+0x176>
 8000d7a:	9b04      	ldr	r3, [sp, #16]
 8000d7c:	eba0 000a 	sub.w	r0, r0, sl
 8000d80:	2240      	movs	r2, #64	@ 0x40
 8000d82:	4082      	lsls	r2, r0
 8000d84:	4313      	orrs	r3, r2
 8000d86:	3401      	adds	r4, #1
 8000d88:	9304      	str	r3, [sp, #16]
 8000d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d8e:	482a      	ldr	r0, [pc, #168]	@ (8000e38 <_vfiprintf_r+0x224>)
 8000d90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000d94:	2206      	movs	r2, #6
 8000d96:	f7ff fa1b 	bl	80001d0 <memchr>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d03f      	beq.n	8000e1e <_vfiprintf_r+0x20a>
 8000d9e:	4b27      	ldr	r3, [pc, #156]	@ (8000e3c <_vfiprintf_r+0x228>)
 8000da0:	bb1b      	cbnz	r3, 8000dea <_vfiprintf_r+0x1d6>
 8000da2:	9b03      	ldr	r3, [sp, #12]
 8000da4:	3307      	adds	r3, #7
 8000da6:	f023 0307 	bic.w	r3, r3, #7
 8000daa:	3308      	adds	r3, #8
 8000dac:	9303      	str	r3, [sp, #12]
 8000dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000db0:	443b      	add	r3, r7
 8000db2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000db4:	e76a      	b.n	8000c8c <_vfiprintf_r+0x78>
 8000db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dba:	460c      	mov	r4, r1
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	e7a8      	b.n	8000d12 <_vfiprintf_r+0xfe>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	3401      	adds	r4, #1
 8000dc4:	9305      	str	r3, [sp, #20]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f04f 0c0a 	mov.w	ip, #10
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000dd2:	3a30      	subs	r2, #48	@ 0x30
 8000dd4:	2a09      	cmp	r2, #9
 8000dd6:	d903      	bls.n	8000de0 <_vfiprintf_r+0x1cc>
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0c6      	beq.n	8000d6a <_vfiprintf_r+0x156>
 8000ddc:	9105      	str	r1, [sp, #20]
 8000dde:	e7c4      	b.n	8000d6a <_vfiprintf_r+0x156>
 8000de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000de4:	4604      	mov	r4, r0
 8000de6:	2301      	movs	r3, #1
 8000de8:	e7f0      	b.n	8000dcc <_vfiprintf_r+0x1b8>
 8000dea:	ab03      	add	r3, sp, #12
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	462a      	mov	r2, r5
 8000df0:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <_vfiprintf_r+0x22c>)
 8000df2:	a904      	add	r1, sp, #16
 8000df4:	4630      	mov	r0, r6
 8000df6:	f3af 8000 	nop.w
 8000dfa:	4607      	mov	r7, r0
 8000dfc:	1c78      	adds	r0, r7, #1
 8000dfe:	d1d6      	bne.n	8000dae <_vfiprintf_r+0x19a>
 8000e00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e02:	07d9      	lsls	r1, r3, #31
 8000e04:	d405      	bmi.n	8000e12 <_vfiprintf_r+0x1fe>
 8000e06:	89ab      	ldrh	r3, [r5, #12]
 8000e08:	059a      	lsls	r2, r3, #22
 8000e0a:	d402      	bmi.n	8000e12 <_vfiprintf_r+0x1fe>
 8000e0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e0e:	f7ff fddf 	bl	80009d0 <__retarget_lock_release_recursive>
 8000e12:	89ab      	ldrh	r3, [r5, #12]
 8000e14:	065b      	lsls	r3, r3, #25
 8000e16:	f53f af1f 	bmi.w	8000c58 <_vfiprintf_r+0x44>
 8000e1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e1c:	e71e      	b.n	8000c5c <_vfiprintf_r+0x48>
 8000e1e:	ab03      	add	r3, sp, #12
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	462a      	mov	r2, r5
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <_vfiprintf_r+0x22c>)
 8000e26:	a904      	add	r1, sp, #16
 8000e28:	4630      	mov	r0, r6
 8000e2a:	f000 f879 	bl	8000f20 <_printf_i>
 8000e2e:	e7e4      	b.n	8000dfa <_vfiprintf_r+0x1e6>
 8000e30:	0800151c 	.word	0x0800151c
 8000e34:	08001522 	.word	0x08001522
 8000e38:	08001526 	.word	0x08001526
 8000e3c:	00000000 	.word	0x00000000
 8000e40:	08000bef 	.word	0x08000bef

08000e44 <_printf_common>:
 8000e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e48:	4616      	mov	r6, r2
 8000e4a:	4698      	mov	r8, r3
 8000e4c:	688a      	ldr	r2, [r1, #8]
 8000e4e:	690b      	ldr	r3, [r1, #16]
 8000e50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e54:	4293      	cmp	r3, r2
 8000e56:	bfb8      	it	lt
 8000e58:	4613      	movlt	r3, r2
 8000e5a:	6033      	str	r3, [r6, #0]
 8000e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e60:	4607      	mov	r7, r0
 8000e62:	460c      	mov	r4, r1
 8000e64:	b10a      	cbz	r2, 8000e6a <_printf_common+0x26>
 8000e66:	3301      	adds	r3, #1
 8000e68:	6033      	str	r3, [r6, #0]
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	0699      	lsls	r1, r3, #26
 8000e6e:	bf42      	ittt	mi
 8000e70:	6833      	ldrmi	r3, [r6, #0]
 8000e72:	3302      	addmi	r3, #2
 8000e74:	6033      	strmi	r3, [r6, #0]
 8000e76:	6825      	ldr	r5, [r4, #0]
 8000e78:	f015 0506 	ands.w	r5, r5, #6
 8000e7c:	d106      	bne.n	8000e8c <_printf_common+0x48>
 8000e7e:	f104 0a19 	add.w	sl, r4, #25
 8000e82:	68e3      	ldr	r3, [r4, #12]
 8000e84:	6832      	ldr	r2, [r6, #0]
 8000e86:	1a9b      	subs	r3, r3, r2
 8000e88:	42ab      	cmp	r3, r5
 8000e8a:	dc26      	bgt.n	8000eda <_printf_common+0x96>
 8000e8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000e90:	6822      	ldr	r2, [r4, #0]
 8000e92:	3b00      	subs	r3, #0
 8000e94:	bf18      	it	ne
 8000e96:	2301      	movne	r3, #1
 8000e98:	0692      	lsls	r2, r2, #26
 8000e9a:	d42b      	bmi.n	8000ef4 <_printf_common+0xb0>
 8000e9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ea0:	4641      	mov	r1, r8
 8000ea2:	4638      	mov	r0, r7
 8000ea4:	47c8      	blx	r9
 8000ea6:	3001      	adds	r0, #1
 8000ea8:	d01e      	beq.n	8000ee8 <_printf_common+0xa4>
 8000eaa:	6823      	ldr	r3, [r4, #0]
 8000eac:	6922      	ldr	r2, [r4, #16]
 8000eae:	f003 0306 	and.w	r3, r3, #6
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf02      	ittt	eq
 8000eb6:	68e5      	ldreq	r5, [r4, #12]
 8000eb8:	6833      	ldreq	r3, [r6, #0]
 8000eba:	1aed      	subeq	r5, r5, r3
 8000ebc:	68a3      	ldr	r3, [r4, #8]
 8000ebe:	bf0c      	ite	eq
 8000ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ec4:	2500      	movne	r5, #0
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	bfc4      	itt	gt
 8000eca:	1a9b      	subgt	r3, r3, r2
 8000ecc:	18ed      	addgt	r5, r5, r3
 8000ece:	2600      	movs	r6, #0
 8000ed0:	341a      	adds	r4, #26
 8000ed2:	42b5      	cmp	r5, r6
 8000ed4:	d11a      	bne.n	8000f0c <_printf_common+0xc8>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	e008      	b.n	8000eec <_printf_common+0xa8>
 8000eda:	2301      	movs	r3, #1
 8000edc:	4652      	mov	r2, sl
 8000ede:	4641      	mov	r1, r8
 8000ee0:	4638      	mov	r0, r7
 8000ee2:	47c8      	blx	r9
 8000ee4:	3001      	adds	r0, #1
 8000ee6:	d103      	bne.n	8000ef0 <_printf_common+0xac>
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef0:	3501      	adds	r5, #1
 8000ef2:	e7c6      	b.n	8000e82 <_printf_common+0x3e>
 8000ef4:	18e1      	adds	r1, r4, r3
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	2030      	movs	r0, #48	@ 0x30
 8000efa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000efe:	4422      	add	r2, r4
 8000f00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f08:	3302      	adds	r3, #2
 8000f0a:	e7c7      	b.n	8000e9c <_printf_common+0x58>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	4622      	mov	r2, r4
 8000f10:	4641      	mov	r1, r8
 8000f12:	4638      	mov	r0, r7
 8000f14:	47c8      	blx	r9
 8000f16:	3001      	adds	r0, #1
 8000f18:	d0e6      	beq.n	8000ee8 <_printf_common+0xa4>
 8000f1a:	3601      	adds	r6, #1
 8000f1c:	e7d9      	b.n	8000ed2 <_printf_common+0x8e>
	...

08000f20 <_printf_i>:
 8000f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f24:	7e0f      	ldrb	r7, [r1, #24]
 8000f26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f28:	2f78      	cmp	r7, #120	@ 0x78
 8000f2a:	4691      	mov	r9, r2
 8000f2c:	4680      	mov	r8, r0
 8000f2e:	460c      	mov	r4, r1
 8000f30:	469a      	mov	sl, r3
 8000f32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f36:	d807      	bhi.n	8000f48 <_printf_i+0x28>
 8000f38:	2f62      	cmp	r7, #98	@ 0x62
 8000f3a:	d80a      	bhi.n	8000f52 <_printf_i+0x32>
 8000f3c:	2f00      	cmp	r7, #0
 8000f3e:	f000 80d2 	beq.w	80010e6 <_printf_i+0x1c6>
 8000f42:	2f58      	cmp	r7, #88	@ 0x58
 8000f44:	f000 80b9 	beq.w	80010ba <_printf_i+0x19a>
 8000f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f50:	e03a      	b.n	8000fc8 <_printf_i+0xa8>
 8000f52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f56:	2b15      	cmp	r3, #21
 8000f58:	d8f6      	bhi.n	8000f48 <_printf_i+0x28>
 8000f5a:	a101      	add	r1, pc, #4	@ (adr r1, 8000f60 <_printf_i+0x40>)
 8000f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f60:	08000fb9 	.word	0x08000fb9
 8000f64:	08000fcd 	.word	0x08000fcd
 8000f68:	08000f49 	.word	0x08000f49
 8000f6c:	08000f49 	.word	0x08000f49
 8000f70:	08000f49 	.word	0x08000f49
 8000f74:	08000f49 	.word	0x08000f49
 8000f78:	08000fcd 	.word	0x08000fcd
 8000f7c:	08000f49 	.word	0x08000f49
 8000f80:	08000f49 	.word	0x08000f49
 8000f84:	08000f49 	.word	0x08000f49
 8000f88:	08000f49 	.word	0x08000f49
 8000f8c:	080010cd 	.word	0x080010cd
 8000f90:	08000ff7 	.word	0x08000ff7
 8000f94:	08001087 	.word	0x08001087
 8000f98:	08000f49 	.word	0x08000f49
 8000f9c:	08000f49 	.word	0x08000f49
 8000fa0:	080010ef 	.word	0x080010ef
 8000fa4:	08000f49 	.word	0x08000f49
 8000fa8:	08000ff7 	.word	0x08000ff7
 8000fac:	08000f49 	.word	0x08000f49
 8000fb0:	08000f49 	.word	0x08000f49
 8000fb4:	0800108f 	.word	0x0800108f
 8000fb8:	6833      	ldr	r3, [r6, #0]
 8000fba:	1d1a      	adds	r2, r3, #4
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6032      	str	r2, [r6, #0]
 8000fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e09d      	b.n	8001108 <_printf_i+0x1e8>
 8000fcc:	6833      	ldr	r3, [r6, #0]
 8000fce:	6820      	ldr	r0, [r4, #0]
 8000fd0:	1d19      	adds	r1, r3, #4
 8000fd2:	6031      	str	r1, [r6, #0]
 8000fd4:	0606      	lsls	r6, r0, #24
 8000fd6:	d501      	bpl.n	8000fdc <_printf_i+0xbc>
 8000fd8:	681d      	ldr	r5, [r3, #0]
 8000fda:	e003      	b.n	8000fe4 <_printf_i+0xc4>
 8000fdc:	0645      	lsls	r5, r0, #25
 8000fde:	d5fb      	bpl.n	8000fd8 <_printf_i+0xb8>
 8000fe0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	da03      	bge.n	8000ff0 <_printf_i+0xd0>
 8000fe8:	232d      	movs	r3, #45	@ 0x2d
 8000fea:	426d      	negs	r5, r5
 8000fec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ff0:	4859      	ldr	r0, [pc, #356]	@ (8001158 <_printf_i+0x238>)
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	e011      	b.n	800101a <_printf_i+0xfa>
 8000ff6:	6821      	ldr	r1, [r4, #0]
 8000ff8:	6833      	ldr	r3, [r6, #0]
 8000ffa:	0608      	lsls	r0, r1, #24
 8000ffc:	f853 5b04 	ldr.w	r5, [r3], #4
 8001000:	d402      	bmi.n	8001008 <_printf_i+0xe8>
 8001002:	0649      	lsls	r1, r1, #25
 8001004:	bf48      	it	mi
 8001006:	b2ad      	uxthmi	r5, r5
 8001008:	2f6f      	cmp	r7, #111	@ 0x6f
 800100a:	4853      	ldr	r0, [pc, #332]	@ (8001158 <_printf_i+0x238>)
 800100c:	6033      	str	r3, [r6, #0]
 800100e:	bf14      	ite	ne
 8001010:	230a      	movne	r3, #10
 8001012:	2308      	moveq	r3, #8
 8001014:	2100      	movs	r1, #0
 8001016:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800101a:	6866      	ldr	r6, [r4, #4]
 800101c:	60a6      	str	r6, [r4, #8]
 800101e:	2e00      	cmp	r6, #0
 8001020:	bfa2      	ittt	ge
 8001022:	6821      	ldrge	r1, [r4, #0]
 8001024:	f021 0104 	bicge.w	r1, r1, #4
 8001028:	6021      	strge	r1, [r4, #0]
 800102a:	b90d      	cbnz	r5, 8001030 <_printf_i+0x110>
 800102c:	2e00      	cmp	r6, #0
 800102e:	d04b      	beq.n	80010c8 <_printf_i+0x1a8>
 8001030:	4616      	mov	r6, r2
 8001032:	fbb5 f1f3 	udiv	r1, r5, r3
 8001036:	fb03 5711 	mls	r7, r3, r1, r5
 800103a:	5dc7      	ldrb	r7, [r0, r7]
 800103c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001040:	462f      	mov	r7, r5
 8001042:	42bb      	cmp	r3, r7
 8001044:	460d      	mov	r5, r1
 8001046:	d9f4      	bls.n	8001032 <_printf_i+0x112>
 8001048:	2b08      	cmp	r3, #8
 800104a:	d10b      	bne.n	8001064 <_printf_i+0x144>
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	07df      	lsls	r7, r3, #31
 8001050:	d508      	bpl.n	8001064 <_printf_i+0x144>
 8001052:	6923      	ldr	r3, [r4, #16]
 8001054:	6861      	ldr	r1, [r4, #4]
 8001056:	4299      	cmp	r1, r3
 8001058:	bfde      	ittt	le
 800105a:	2330      	movle	r3, #48	@ 0x30
 800105c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001060:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001064:	1b92      	subs	r2, r2, r6
 8001066:	6122      	str	r2, [r4, #16]
 8001068:	f8cd a000 	str.w	sl, [sp]
 800106c:	464b      	mov	r3, r9
 800106e:	aa03      	add	r2, sp, #12
 8001070:	4621      	mov	r1, r4
 8001072:	4640      	mov	r0, r8
 8001074:	f7ff fee6 	bl	8000e44 <_printf_common>
 8001078:	3001      	adds	r0, #1
 800107a:	d14a      	bne.n	8001112 <_printf_i+0x1f2>
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	b004      	add	sp, #16
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	f043 0320 	orr.w	r3, r3, #32
 800108c:	6023      	str	r3, [r4, #0]
 800108e:	4833      	ldr	r0, [pc, #204]	@ (800115c <_printf_i+0x23c>)
 8001090:	2778      	movs	r7, #120	@ 0x78
 8001092:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	6831      	ldr	r1, [r6, #0]
 800109a:	061f      	lsls	r7, r3, #24
 800109c:	f851 5b04 	ldr.w	r5, [r1], #4
 80010a0:	d402      	bmi.n	80010a8 <_printf_i+0x188>
 80010a2:	065f      	lsls	r7, r3, #25
 80010a4:	bf48      	it	mi
 80010a6:	b2ad      	uxthmi	r5, r5
 80010a8:	6031      	str	r1, [r6, #0]
 80010aa:	07d9      	lsls	r1, r3, #31
 80010ac:	bf44      	itt	mi
 80010ae:	f043 0320 	orrmi.w	r3, r3, #32
 80010b2:	6023      	strmi	r3, [r4, #0]
 80010b4:	b11d      	cbz	r5, 80010be <_printf_i+0x19e>
 80010b6:	2310      	movs	r3, #16
 80010b8:	e7ac      	b.n	8001014 <_printf_i+0xf4>
 80010ba:	4827      	ldr	r0, [pc, #156]	@ (8001158 <_printf_i+0x238>)
 80010bc:	e7e9      	b.n	8001092 <_printf_i+0x172>
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	f023 0320 	bic.w	r3, r3, #32
 80010c4:	6023      	str	r3, [r4, #0]
 80010c6:	e7f6      	b.n	80010b6 <_printf_i+0x196>
 80010c8:	4616      	mov	r6, r2
 80010ca:	e7bd      	b.n	8001048 <_printf_i+0x128>
 80010cc:	6833      	ldr	r3, [r6, #0]
 80010ce:	6825      	ldr	r5, [r4, #0]
 80010d0:	6961      	ldr	r1, [r4, #20]
 80010d2:	1d18      	adds	r0, r3, #4
 80010d4:	6030      	str	r0, [r6, #0]
 80010d6:	062e      	lsls	r6, r5, #24
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	d501      	bpl.n	80010e0 <_printf_i+0x1c0>
 80010dc:	6019      	str	r1, [r3, #0]
 80010de:	e002      	b.n	80010e6 <_printf_i+0x1c6>
 80010e0:	0668      	lsls	r0, r5, #25
 80010e2:	d5fb      	bpl.n	80010dc <_printf_i+0x1bc>
 80010e4:	8019      	strh	r1, [r3, #0]
 80010e6:	2300      	movs	r3, #0
 80010e8:	6123      	str	r3, [r4, #16]
 80010ea:	4616      	mov	r6, r2
 80010ec:	e7bc      	b.n	8001068 <_printf_i+0x148>
 80010ee:	6833      	ldr	r3, [r6, #0]
 80010f0:	1d1a      	adds	r2, r3, #4
 80010f2:	6032      	str	r2, [r6, #0]
 80010f4:	681e      	ldr	r6, [r3, #0]
 80010f6:	6862      	ldr	r2, [r4, #4]
 80010f8:	2100      	movs	r1, #0
 80010fa:	4630      	mov	r0, r6
 80010fc:	f7ff f868 	bl	80001d0 <memchr>
 8001100:	b108      	cbz	r0, 8001106 <_printf_i+0x1e6>
 8001102:	1b80      	subs	r0, r0, r6
 8001104:	6060      	str	r0, [r4, #4]
 8001106:	6863      	ldr	r3, [r4, #4]
 8001108:	6123      	str	r3, [r4, #16]
 800110a:	2300      	movs	r3, #0
 800110c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001110:	e7aa      	b.n	8001068 <_printf_i+0x148>
 8001112:	6923      	ldr	r3, [r4, #16]
 8001114:	4632      	mov	r2, r6
 8001116:	4649      	mov	r1, r9
 8001118:	4640      	mov	r0, r8
 800111a:	47d0      	blx	sl
 800111c:	3001      	adds	r0, #1
 800111e:	d0ad      	beq.n	800107c <_printf_i+0x15c>
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	079b      	lsls	r3, r3, #30
 8001124:	d413      	bmi.n	800114e <_printf_i+0x22e>
 8001126:	68e0      	ldr	r0, [r4, #12]
 8001128:	9b03      	ldr	r3, [sp, #12]
 800112a:	4298      	cmp	r0, r3
 800112c:	bfb8      	it	lt
 800112e:	4618      	movlt	r0, r3
 8001130:	e7a6      	b.n	8001080 <_printf_i+0x160>
 8001132:	2301      	movs	r3, #1
 8001134:	4632      	mov	r2, r6
 8001136:	4649      	mov	r1, r9
 8001138:	4640      	mov	r0, r8
 800113a:	47d0      	blx	sl
 800113c:	3001      	adds	r0, #1
 800113e:	d09d      	beq.n	800107c <_printf_i+0x15c>
 8001140:	3501      	adds	r5, #1
 8001142:	68e3      	ldr	r3, [r4, #12]
 8001144:	9903      	ldr	r1, [sp, #12]
 8001146:	1a5b      	subs	r3, r3, r1
 8001148:	42ab      	cmp	r3, r5
 800114a:	dcf2      	bgt.n	8001132 <_printf_i+0x212>
 800114c:	e7eb      	b.n	8001126 <_printf_i+0x206>
 800114e:	2500      	movs	r5, #0
 8001150:	f104 0619 	add.w	r6, r4, #25
 8001154:	e7f5      	b.n	8001142 <_printf_i+0x222>
 8001156:	bf00      	nop
 8001158:	0800152d 	.word	0x0800152d
 800115c:	0800153e 	.word	0x0800153e

08001160 <__sflush_r>:
 8001160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	0716      	lsls	r6, r2, #28
 8001168:	4605      	mov	r5, r0
 800116a:	460c      	mov	r4, r1
 800116c:	d454      	bmi.n	8001218 <__sflush_r+0xb8>
 800116e:	684b      	ldr	r3, [r1, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	dc02      	bgt.n	800117a <__sflush_r+0x1a>
 8001174:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001176:	2b00      	cmp	r3, #0
 8001178:	dd48      	ble.n	800120c <__sflush_r+0xac>
 800117a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800117c:	2e00      	cmp	r6, #0
 800117e:	d045      	beq.n	800120c <__sflush_r+0xac>
 8001180:	2300      	movs	r3, #0
 8001182:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001186:	682f      	ldr	r7, [r5, #0]
 8001188:	6a21      	ldr	r1, [r4, #32]
 800118a:	602b      	str	r3, [r5, #0]
 800118c:	d030      	beq.n	80011f0 <__sflush_r+0x90>
 800118e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001190:	89a3      	ldrh	r3, [r4, #12]
 8001192:	0759      	lsls	r1, r3, #29
 8001194:	d505      	bpl.n	80011a2 <__sflush_r+0x42>
 8001196:	6863      	ldr	r3, [r4, #4]
 8001198:	1ad2      	subs	r2, r2, r3
 800119a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800119c:	b10b      	cbz	r3, 80011a2 <__sflush_r+0x42>
 800119e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011a0:	1ad2      	subs	r2, r2, r3
 80011a2:	2300      	movs	r3, #0
 80011a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011a6:	6a21      	ldr	r1, [r4, #32]
 80011a8:	4628      	mov	r0, r5
 80011aa:	47b0      	blx	r6
 80011ac:	1c43      	adds	r3, r0, #1
 80011ae:	89a3      	ldrh	r3, [r4, #12]
 80011b0:	d106      	bne.n	80011c0 <__sflush_r+0x60>
 80011b2:	6829      	ldr	r1, [r5, #0]
 80011b4:	291d      	cmp	r1, #29
 80011b6:	d82b      	bhi.n	8001210 <__sflush_r+0xb0>
 80011b8:	4a28      	ldr	r2, [pc, #160]	@ (800125c <__sflush_r+0xfc>)
 80011ba:	410a      	asrs	r2, r1
 80011bc:	07d6      	lsls	r6, r2, #31
 80011be:	d427      	bmi.n	8001210 <__sflush_r+0xb0>
 80011c0:	2200      	movs	r2, #0
 80011c2:	6062      	str	r2, [r4, #4]
 80011c4:	04d9      	lsls	r1, r3, #19
 80011c6:	6922      	ldr	r2, [r4, #16]
 80011c8:	6022      	str	r2, [r4, #0]
 80011ca:	d504      	bpl.n	80011d6 <__sflush_r+0x76>
 80011cc:	1c42      	adds	r2, r0, #1
 80011ce:	d101      	bne.n	80011d4 <__sflush_r+0x74>
 80011d0:	682b      	ldr	r3, [r5, #0]
 80011d2:	b903      	cbnz	r3, 80011d6 <__sflush_r+0x76>
 80011d4:	6560      	str	r0, [r4, #84]	@ 0x54
 80011d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011d8:	602f      	str	r7, [r5, #0]
 80011da:	b1b9      	cbz	r1, 800120c <__sflush_r+0xac>
 80011dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011e0:	4299      	cmp	r1, r3
 80011e2:	d002      	beq.n	80011ea <__sflush_r+0x8a>
 80011e4:	4628      	mov	r0, r5
 80011e6:	f7ff fbf5 	bl	80009d4 <_free_r>
 80011ea:	2300      	movs	r3, #0
 80011ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80011ee:	e00d      	b.n	800120c <__sflush_r+0xac>
 80011f0:	2301      	movs	r3, #1
 80011f2:	4628      	mov	r0, r5
 80011f4:	47b0      	blx	r6
 80011f6:	4602      	mov	r2, r0
 80011f8:	1c50      	adds	r0, r2, #1
 80011fa:	d1c9      	bne.n	8001190 <__sflush_r+0x30>
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0c6      	beq.n	8001190 <__sflush_r+0x30>
 8001202:	2b1d      	cmp	r3, #29
 8001204:	d001      	beq.n	800120a <__sflush_r+0xaa>
 8001206:	2b16      	cmp	r3, #22
 8001208:	d11d      	bne.n	8001246 <__sflush_r+0xe6>
 800120a:	602f      	str	r7, [r5, #0]
 800120c:	2000      	movs	r0, #0
 800120e:	e021      	b.n	8001254 <__sflush_r+0xf4>
 8001210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001214:	b21b      	sxth	r3, r3
 8001216:	e01a      	b.n	800124e <__sflush_r+0xee>
 8001218:	690f      	ldr	r7, [r1, #16]
 800121a:	2f00      	cmp	r7, #0
 800121c:	d0f6      	beq.n	800120c <__sflush_r+0xac>
 800121e:	0793      	lsls	r3, r2, #30
 8001220:	680e      	ldr	r6, [r1, #0]
 8001222:	bf08      	it	eq
 8001224:	694b      	ldreq	r3, [r1, #20]
 8001226:	600f      	str	r7, [r1, #0]
 8001228:	bf18      	it	ne
 800122a:	2300      	movne	r3, #0
 800122c:	1bf6      	subs	r6, r6, r7
 800122e:	608b      	str	r3, [r1, #8]
 8001230:	2e00      	cmp	r6, #0
 8001232:	ddeb      	ble.n	800120c <__sflush_r+0xac>
 8001234:	6a21      	ldr	r1, [r4, #32]
 8001236:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800123a:	4633      	mov	r3, r6
 800123c:	463a      	mov	r2, r7
 800123e:	4628      	mov	r0, r5
 8001240:	47e0      	blx	ip
 8001242:	2800      	cmp	r0, #0
 8001244:	dc07      	bgt.n	8001256 <__sflush_r+0xf6>
 8001246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800124a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800124e:	81a3      	strh	r3, [r4, #12]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001256:	4407      	add	r7, r0
 8001258:	1a36      	subs	r6, r6, r0
 800125a:	e7e9      	b.n	8001230 <__sflush_r+0xd0>
 800125c:	dfbffffe 	.word	0xdfbffffe

08001260 <_fflush_r>:
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	690b      	ldr	r3, [r1, #16]
 8001264:	4605      	mov	r5, r0
 8001266:	460c      	mov	r4, r1
 8001268:	b913      	cbnz	r3, 8001270 <_fflush_r+0x10>
 800126a:	2500      	movs	r5, #0
 800126c:	4628      	mov	r0, r5
 800126e:	bd38      	pop	{r3, r4, r5, pc}
 8001270:	b118      	cbz	r0, 800127a <_fflush_r+0x1a>
 8001272:	6a03      	ldr	r3, [r0, #32]
 8001274:	b90b      	cbnz	r3, 800127a <_fflush_r+0x1a>
 8001276:	f7ff faa5 	bl	80007c4 <__sinit>
 800127a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f3      	beq.n	800126a <_fflush_r+0xa>
 8001282:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001284:	07d0      	lsls	r0, r2, #31
 8001286:	d404      	bmi.n	8001292 <_fflush_r+0x32>
 8001288:	0599      	lsls	r1, r3, #22
 800128a:	d402      	bmi.n	8001292 <_fflush_r+0x32>
 800128c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800128e:	f7ff fb9e 	bl	80009ce <__retarget_lock_acquire_recursive>
 8001292:	4628      	mov	r0, r5
 8001294:	4621      	mov	r1, r4
 8001296:	f7ff ff63 	bl	8001160 <__sflush_r>
 800129a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800129c:	07da      	lsls	r2, r3, #31
 800129e:	4605      	mov	r5, r0
 80012a0:	d4e4      	bmi.n	800126c <_fflush_r+0xc>
 80012a2:	89a3      	ldrh	r3, [r4, #12]
 80012a4:	059b      	lsls	r3, r3, #22
 80012a6:	d4e1      	bmi.n	800126c <_fflush_r+0xc>
 80012a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012aa:	f7ff fb91 	bl	80009d0 <__retarget_lock_release_recursive>
 80012ae:	e7dd      	b.n	800126c <_fflush_r+0xc>

080012b0 <__swbuf_r>:
 80012b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b2:	460e      	mov	r6, r1
 80012b4:	4614      	mov	r4, r2
 80012b6:	4605      	mov	r5, r0
 80012b8:	b118      	cbz	r0, 80012c2 <__swbuf_r+0x12>
 80012ba:	6a03      	ldr	r3, [r0, #32]
 80012bc:	b90b      	cbnz	r3, 80012c2 <__swbuf_r+0x12>
 80012be:	f7ff fa81 	bl	80007c4 <__sinit>
 80012c2:	69a3      	ldr	r3, [r4, #24]
 80012c4:	60a3      	str	r3, [r4, #8]
 80012c6:	89a3      	ldrh	r3, [r4, #12]
 80012c8:	071a      	lsls	r2, r3, #28
 80012ca:	d501      	bpl.n	80012d0 <__swbuf_r+0x20>
 80012cc:	6923      	ldr	r3, [r4, #16]
 80012ce:	b943      	cbnz	r3, 80012e2 <__swbuf_r+0x32>
 80012d0:	4621      	mov	r1, r4
 80012d2:	4628      	mov	r0, r5
 80012d4:	f000 f82a 	bl	800132c <__swsetup_r>
 80012d8:	b118      	cbz	r0, 80012e2 <__swbuf_r+0x32>
 80012da:	f04f 37ff 	mov.w	r7, #4294967295
 80012de:	4638      	mov	r0, r7
 80012e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	6922      	ldr	r2, [r4, #16]
 80012e6:	1a98      	subs	r0, r3, r2
 80012e8:	6963      	ldr	r3, [r4, #20]
 80012ea:	b2f6      	uxtb	r6, r6
 80012ec:	4283      	cmp	r3, r0
 80012ee:	4637      	mov	r7, r6
 80012f0:	dc05      	bgt.n	80012fe <__swbuf_r+0x4e>
 80012f2:	4621      	mov	r1, r4
 80012f4:	4628      	mov	r0, r5
 80012f6:	f7ff ffb3 	bl	8001260 <_fflush_r>
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d1ed      	bne.n	80012da <__swbuf_r+0x2a>
 80012fe:	68a3      	ldr	r3, [r4, #8]
 8001300:	3b01      	subs	r3, #1
 8001302:	60a3      	str	r3, [r4, #8]
 8001304:	6823      	ldr	r3, [r4, #0]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	6022      	str	r2, [r4, #0]
 800130a:	701e      	strb	r6, [r3, #0]
 800130c:	6962      	ldr	r2, [r4, #20]
 800130e:	1c43      	adds	r3, r0, #1
 8001310:	429a      	cmp	r2, r3
 8001312:	d004      	beq.n	800131e <__swbuf_r+0x6e>
 8001314:	89a3      	ldrh	r3, [r4, #12]
 8001316:	07db      	lsls	r3, r3, #31
 8001318:	d5e1      	bpl.n	80012de <__swbuf_r+0x2e>
 800131a:	2e0a      	cmp	r6, #10
 800131c:	d1df      	bne.n	80012de <__swbuf_r+0x2e>
 800131e:	4621      	mov	r1, r4
 8001320:	4628      	mov	r0, r5
 8001322:	f7ff ff9d 	bl	8001260 <_fflush_r>
 8001326:	2800      	cmp	r0, #0
 8001328:	d0d9      	beq.n	80012de <__swbuf_r+0x2e>
 800132a:	e7d6      	b.n	80012da <__swbuf_r+0x2a>

0800132c <__swsetup_r>:
 800132c:	b538      	push	{r3, r4, r5, lr}
 800132e:	4b29      	ldr	r3, [pc, #164]	@ (80013d4 <__swsetup_r+0xa8>)
 8001330:	4605      	mov	r5, r0
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	460c      	mov	r4, r1
 8001336:	b118      	cbz	r0, 8001340 <__swsetup_r+0x14>
 8001338:	6a03      	ldr	r3, [r0, #32]
 800133a:	b90b      	cbnz	r3, 8001340 <__swsetup_r+0x14>
 800133c:	f7ff fa42 	bl	80007c4 <__sinit>
 8001340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001344:	0719      	lsls	r1, r3, #28
 8001346:	d422      	bmi.n	800138e <__swsetup_r+0x62>
 8001348:	06da      	lsls	r2, r3, #27
 800134a:	d407      	bmi.n	800135c <__swsetup_r+0x30>
 800134c:	2209      	movs	r2, #9
 800134e:	602a      	str	r2, [r5, #0]
 8001350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001354:	81a3      	strh	r3, [r4, #12]
 8001356:	f04f 30ff 	mov.w	r0, #4294967295
 800135a:	e033      	b.n	80013c4 <__swsetup_r+0x98>
 800135c:	0758      	lsls	r0, r3, #29
 800135e:	d512      	bpl.n	8001386 <__swsetup_r+0x5a>
 8001360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001362:	b141      	cbz	r1, 8001376 <__swsetup_r+0x4a>
 8001364:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001368:	4299      	cmp	r1, r3
 800136a:	d002      	beq.n	8001372 <__swsetup_r+0x46>
 800136c:	4628      	mov	r0, r5
 800136e:	f7ff fb31 	bl	80009d4 <_free_r>
 8001372:	2300      	movs	r3, #0
 8001374:	6363      	str	r3, [r4, #52]	@ 0x34
 8001376:	89a3      	ldrh	r3, [r4, #12]
 8001378:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800137c:	81a3      	strh	r3, [r4, #12]
 800137e:	2300      	movs	r3, #0
 8001380:	6063      	str	r3, [r4, #4]
 8001382:	6923      	ldr	r3, [r4, #16]
 8001384:	6023      	str	r3, [r4, #0]
 8001386:	89a3      	ldrh	r3, [r4, #12]
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	81a3      	strh	r3, [r4, #12]
 800138e:	6923      	ldr	r3, [r4, #16]
 8001390:	b94b      	cbnz	r3, 80013a6 <__swsetup_r+0x7a>
 8001392:	89a3      	ldrh	r3, [r4, #12]
 8001394:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800139c:	d003      	beq.n	80013a6 <__swsetup_r+0x7a>
 800139e:	4621      	mov	r1, r4
 80013a0:	4628      	mov	r0, r5
 80013a2:	f000 f84f 	bl	8001444 <__smakebuf_r>
 80013a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013aa:	f013 0201 	ands.w	r2, r3, #1
 80013ae:	d00a      	beq.n	80013c6 <__swsetup_r+0x9a>
 80013b0:	2200      	movs	r2, #0
 80013b2:	60a2      	str	r2, [r4, #8]
 80013b4:	6962      	ldr	r2, [r4, #20]
 80013b6:	4252      	negs	r2, r2
 80013b8:	61a2      	str	r2, [r4, #24]
 80013ba:	6922      	ldr	r2, [r4, #16]
 80013bc:	b942      	cbnz	r2, 80013d0 <__swsetup_r+0xa4>
 80013be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80013c2:	d1c5      	bne.n	8001350 <__swsetup_r+0x24>
 80013c4:	bd38      	pop	{r3, r4, r5, pc}
 80013c6:	0799      	lsls	r1, r3, #30
 80013c8:	bf58      	it	pl
 80013ca:	6962      	ldrpl	r2, [r4, #20]
 80013cc:	60a2      	str	r2, [r4, #8]
 80013ce:	e7f4      	b.n	80013ba <__swsetup_r+0x8e>
 80013d0:	2000      	movs	r0, #0
 80013d2:	e7f7      	b.n	80013c4 <__swsetup_r+0x98>
 80013d4:	2000000c 	.word	0x2000000c

080013d8 <_sbrk_r>:
 80013d8:	b538      	push	{r3, r4, r5, lr}
 80013da:	4d06      	ldr	r5, [pc, #24]	@ (80013f4 <_sbrk_r+0x1c>)
 80013dc:	2300      	movs	r3, #0
 80013de:	4604      	mov	r4, r0
 80013e0:	4608      	mov	r0, r1
 80013e2:	602b      	str	r3, [r5, #0]
 80013e4:	f7ff f902 	bl	80005ec <_sbrk>
 80013e8:	1c43      	adds	r3, r0, #1
 80013ea:	d102      	bne.n	80013f2 <_sbrk_r+0x1a>
 80013ec:	682b      	ldr	r3, [r5, #0]
 80013ee:	b103      	cbz	r3, 80013f2 <_sbrk_r+0x1a>
 80013f0:	6023      	str	r3, [r4, #0]
 80013f2:	bd38      	pop	{r3, r4, r5, pc}
 80013f4:	200001b8 	.word	0x200001b8

080013f8 <__swhatbuf_r>:
 80013f8:	b570      	push	{r4, r5, r6, lr}
 80013fa:	460c      	mov	r4, r1
 80013fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001400:	2900      	cmp	r1, #0
 8001402:	b096      	sub	sp, #88	@ 0x58
 8001404:	4615      	mov	r5, r2
 8001406:	461e      	mov	r6, r3
 8001408:	da0d      	bge.n	8001426 <__swhatbuf_r+0x2e>
 800140a:	89a3      	ldrh	r3, [r4, #12]
 800140c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001410:	f04f 0100 	mov.w	r1, #0
 8001414:	bf14      	ite	ne
 8001416:	2340      	movne	r3, #64	@ 0x40
 8001418:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800141c:	2000      	movs	r0, #0
 800141e:	6031      	str	r1, [r6, #0]
 8001420:	602b      	str	r3, [r5, #0]
 8001422:	b016      	add	sp, #88	@ 0x58
 8001424:	bd70      	pop	{r4, r5, r6, pc}
 8001426:	466a      	mov	r2, sp
 8001428:	f000 f848 	bl	80014bc <_fstat_r>
 800142c:	2800      	cmp	r0, #0
 800142e:	dbec      	blt.n	800140a <__swhatbuf_r+0x12>
 8001430:	9901      	ldr	r1, [sp, #4]
 8001432:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001436:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800143a:	4259      	negs	r1, r3
 800143c:	4159      	adcs	r1, r3
 800143e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001442:	e7eb      	b.n	800141c <__swhatbuf_r+0x24>

08001444 <__smakebuf_r>:
 8001444:	898b      	ldrh	r3, [r1, #12]
 8001446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001448:	079d      	lsls	r5, r3, #30
 800144a:	4606      	mov	r6, r0
 800144c:	460c      	mov	r4, r1
 800144e:	d507      	bpl.n	8001460 <__smakebuf_r+0x1c>
 8001450:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001454:	6023      	str	r3, [r4, #0]
 8001456:	6123      	str	r3, [r4, #16]
 8001458:	2301      	movs	r3, #1
 800145a:	6163      	str	r3, [r4, #20]
 800145c:	b003      	add	sp, #12
 800145e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001460:	ab01      	add	r3, sp, #4
 8001462:	466a      	mov	r2, sp
 8001464:	f7ff ffc8 	bl	80013f8 <__swhatbuf_r>
 8001468:	9f00      	ldr	r7, [sp, #0]
 800146a:	4605      	mov	r5, r0
 800146c:	4639      	mov	r1, r7
 800146e:	4630      	mov	r0, r6
 8001470:	f7ff fb1c 	bl	8000aac <_malloc_r>
 8001474:	b948      	cbnz	r0, 800148a <__smakebuf_r+0x46>
 8001476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800147a:	059a      	lsls	r2, r3, #22
 800147c:	d4ee      	bmi.n	800145c <__smakebuf_r+0x18>
 800147e:	f023 0303 	bic.w	r3, r3, #3
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	81a3      	strh	r3, [r4, #12]
 8001488:	e7e2      	b.n	8001450 <__smakebuf_r+0xc>
 800148a:	89a3      	ldrh	r3, [r4, #12]
 800148c:	6020      	str	r0, [r4, #0]
 800148e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001492:	81a3      	strh	r3, [r4, #12]
 8001494:	9b01      	ldr	r3, [sp, #4]
 8001496:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800149a:	b15b      	cbz	r3, 80014b4 <__smakebuf_r+0x70>
 800149c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014a0:	4630      	mov	r0, r6
 80014a2:	f000 f81d 	bl	80014e0 <_isatty_r>
 80014a6:	b128      	cbz	r0, 80014b4 <__smakebuf_r+0x70>
 80014a8:	89a3      	ldrh	r3, [r4, #12]
 80014aa:	f023 0303 	bic.w	r3, r3, #3
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	81a3      	strh	r3, [r4, #12]
 80014b4:	89a3      	ldrh	r3, [r4, #12]
 80014b6:	431d      	orrs	r5, r3
 80014b8:	81a5      	strh	r5, [r4, #12]
 80014ba:	e7cf      	b.n	800145c <__smakebuf_r+0x18>

080014bc <_fstat_r>:
 80014bc:	b538      	push	{r3, r4, r5, lr}
 80014be:	4d07      	ldr	r5, [pc, #28]	@ (80014dc <_fstat_r+0x20>)
 80014c0:	2300      	movs	r3, #0
 80014c2:	4604      	mov	r4, r0
 80014c4:	4608      	mov	r0, r1
 80014c6:	4611      	mov	r1, r2
 80014c8:	602b      	str	r3, [r5, #0]
 80014ca:	f7ff f869 	bl	80005a0 <_fstat>
 80014ce:	1c43      	adds	r3, r0, #1
 80014d0:	d102      	bne.n	80014d8 <_fstat_r+0x1c>
 80014d2:	682b      	ldr	r3, [r5, #0]
 80014d4:	b103      	cbz	r3, 80014d8 <_fstat_r+0x1c>
 80014d6:	6023      	str	r3, [r4, #0]
 80014d8:	bd38      	pop	{r3, r4, r5, pc}
 80014da:	bf00      	nop
 80014dc:	200001b8 	.word	0x200001b8

080014e0 <_isatty_r>:
 80014e0:	b538      	push	{r3, r4, r5, lr}
 80014e2:	4d06      	ldr	r5, [pc, #24]	@ (80014fc <_isatty_r+0x1c>)
 80014e4:	2300      	movs	r3, #0
 80014e6:	4604      	mov	r4, r0
 80014e8:	4608      	mov	r0, r1
 80014ea:	602b      	str	r3, [r5, #0]
 80014ec:	f7ff f867 	bl	80005be <_isatty>
 80014f0:	1c43      	adds	r3, r0, #1
 80014f2:	d102      	bne.n	80014fa <_isatty_r+0x1a>
 80014f4:	682b      	ldr	r3, [r5, #0]
 80014f6:	b103      	cbz	r3, 80014fa <_isatty_r+0x1a>
 80014f8:	6023      	str	r3, [r4, #0]
 80014fa:	bd38      	pop	{r3, r4, r5, pc}
 80014fc:	200001b8 	.word	0x200001b8

08001500 <_init>:
 8001500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001502:	bf00      	nop
 8001504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001506:	bc08      	pop	{r3}
 8001508:	469e      	mov	lr, r3
 800150a:	4770      	bx	lr

0800150c <_fini>:
 800150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150e:	bf00      	nop
 8001510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001512:	bc08      	pop	{r3}
 8001514:	469e      	mov	lr, r3
 8001516:	4770      	bx	lr
